{
    "/Users/kyochul_jang/Desktop/Project/code-diagram/poc/reporter.py": {
        "nodes": [
            {
                "id": "reporter.generate_report",
                "function_name": "generate_report",
                "file": "poc/reporter.py",
                "line_start": 2,
                "line_end": 21,
                "description": "Generates a report by printing average, median, counts of high/low values and a comparative message."
            }
        ],
        "edges": []
    },
    "/Users/kyochul_jang/Desktop/Project/code-diagram/poc/analyzer.py": {
        "nodes": [
            {
                "id": "analyzer.analyze_data",
                "function_name": "analyze_data",
                "file": "poc/analyzer.py",
                "line_start": 4,
                "line_end": 16,
                "description": "Function to analyze numerical data: computes average and median, and partitions values into high and low lists."
            }
        ],
        "edges": [
            {
                "id": "e0",
                "source": "analyzer.analyze_data",
                "target": "statistics.mean"
            },
            {
                "id": "e1",
                "source": "analyzer.analyze_data",
                "target": "statistics.median"
            }
        ]
    },
    "/Users/kyochul_jang/Desktop/Project/code-diagram/poc/processor.py": {
        "nodes": [
            {
                "id": "processor.process_data",
                "function_name": "process_data",
                "file": "poc/processor.py",
                "line_start": 3,
                "line_end": 15,
                "description": "Entry point for processing a list of numbers with branching handlers."
            },
            {
                "id": "processor.handle_div3",
                "function_name": "handle_div3",
                "file": "poc/processor.py",
                "line_start": 17,
                "line_end": 19,
                "description": "Handles numbers divisible by 3: prints a message and returns num // 3."
            },
            {
                "id": "processor.handle_even",
                "function_name": "handle_even",
                "file": "poc/processor.py",
                "line_start": 21,
                "line_end": 23,
                "description": "Handles even numbers (not divisible by 3): prints a message and returns num / 2."
            },
            {
                "id": "processor.handle_other",
                "function_name": "handle_other",
                "file": "poc/processor.py",
                "line_start": 25,
                "line_end": 27,
                "description": "Handles other numbers: prints a message and returns num * 3 + 1."
            }
        ],
        "edges": [
            {
                "id": "e0",
                "source": "processor.process_data",
                "target": "processor.handle_div3",
                "description": "Called when num % 3 == 0"
            },
            {
                "id": "e1",
                "source": "processor.process_data",
                "target": "processor.handle_even",
                "description": "Called when num % 3 != 0 and num % 2 == 0"
            },
            {
                "id": "e2",
                "source": "processor.process_data",
                "target": "processor.handle_other",
                "description": "Called when num is neither divisible by 3 nor even"
            }
        ]
    },
    "/Users/kyochul_jang/Desktop/Project/code-diagram/poc/main.py": {
        "nodes": [
            {
                "id": "main.main",
                "function_name": "main",
                "file": "poc/main.py",
                "line_start": 7,
                "line_end": 15,
                "description": "Main function that orchestrates data fetching, processing, analysis, and report generation with error handling."
            }
        ],
        "edges": [
            {
                "id": "e0",
                "source": "main.main",
                "target": "fetcher.fetch_data",
                "comment": "Call to fetch_data from fetcher module"
            },
            {
                "id": "e1",
                "source": "main.main",
                "target": "processor.process_data",
                "comment": "Call to process_data with fetched data"
            },
            {
                "id": "e2",
                "source": "main.main",
                "target": "analyzer.analyze_data",
                "comment": "Call to analyze_data with processed data"
            },
            {
                "id": "e3",
                "source": "main.main",
                "target": "reporter.generate_report",
                "comment": "Call to generate_report with analysis results"
            }
        ]
    },
    "/Users/kyochul_jang/Desktop/Project/code-diagram/poc/fetcher.py": {
        "nodes": [
            {
                "id": "fetcher.fetch_data",
                "function_name": "fetch_data",
                "file": "poc/fetcher.py",
                "line_start": 4,
                "line_end": 13,
                "description": "Function to fetch data with up to `retries` attempts, returning a list of random integers on success or raising ConnectionError on failure."
            }
        ],
        "edges": []
    }
}