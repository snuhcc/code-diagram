{
    "nodes": [
        {
            "id": "grad_cam.reset_optimizer_weights",
            "function_name": "reset_optimizer_weights",
            "file": "grad_cam.py",
            "line_start": 15,
            "line_end": 18,
            "description": "Remove optimizer weights group from an HDF5 model file."
        },
        {
            "id": "grad_cam.target_category_loss",
            "function_name": "target_category_loss",
            "file": "grad_cam.py",
            "line_start": 21,
            "line_end": 22,
            "description": "Zero out all classes except the target category in model output tensor."
        },
        {
            "id": "grad_cam.target_category_loss_output_shape",
            "function_name": "target_category_loss_output_shape",
            "file": "grad_cam.py",
            "line_start": 25,
            "line_end": 26,
            "description": "Pass through the output shape for the target category loss layer."
        },
        {
            "id": "grad_cam.normalize",
            "function_name": "normalize",
            "file": "grad_cam.py",
            "line_start": 29,
            "line_end": 31,
            "description": "Normalize tensor by its L2 norm."
        },
        {
            "id": "grad_cam.load_image",
            "function_name": "load_image",
            "file": "grad_cam.py",
            "line_start": 34,
            "line_end": 37,
            "description": "Expand dims and preprocess an input image array."
        },
        {
            "id": "grad_cam.register_gradient",
            "function_name": "register_gradient",
            "file": "grad_cam.py",
            "line_start": 40,
            "line_end": 47,
            "description": "Register a custom guided backpropagation gradient for ReLU."
        },
        {
            "id": "grad_cam.compile_saliency_function",
            "function_name": "compile_saliency_function",
            "file": "grad_cam.py",
            "line_start": 50,
            "line_end": 55,
            "description": "Compile a Keras function to compute saliency maps at a given conv layer."
        },
        {
            "id": "grad_cam.modify_backprop",
            "function_name": "modify_backprop",
            "file": "grad_cam.py",
            "line_start": 58,
            "line_end": 79,
            "description": "Override ReLU gradient and reload model for guided backpropagation."
        },
        {
            "id": "grad_cam.deprocess_image",
            "function_name": "deprocess_image",
            "file": "grad_cam.py",
            "line_start": 82,
            "line_end": 102,
            "description": "Convert a tensor into a displayable uint8 RGB image."
        },
        {
            "id": "grad_cam.compile_gradient_function",
            "function_name": "compile_gradient_function",
            "file": "grad_cam.py",
            "line_start": 105,
            "line_end": 119,
            "description": "Build a function that computes conv layer activations and gradients for a target class."
        },
        {
            "id": "grad_cam.calculate_gradient_weighted_CAM",
            "function_name": "calculate_gradient_weighted_CAM",
            "file": "grad_cam.py",
            "line_start": 122,
            "line_end": 141,
            "description": "Compute Grad-CAM heatmap and overlay it on the image."
        },
        {
            "id": "grad_cam.calculate_guided_gradient_CAM",
            "function_name": "calculate_guided_gradient_CAM",
            "file": "grad_cam.py",
            "line_start": 144,
            "line_end": 152,
            "description": "Combine guided backpropagation saliency with Grad-CAM."
        },
        {
            "id": "grad_cam.calculate_guided_gradient_CAM_v2",
            "function_name": "calculate_guided_gradient_CAM_v2",
            "file": "grad_cam.py",
            "line_start": 155,
            "line_end": 168,
            "description": "Alternative guided Grad-CAM combining resized heatmap and saliency."
        },
        {
            "id": "grad_cam.__main__",
            "function_name": "__main__",
            "file": "grad_cam.py",
            "line_start": 170,
            "line_end": 190,
            "description": "Script entry point: load model and data, compute and save guided Grad-CAM image."
        }
    ],
    "edges": [
        {
            "id": "e0",
            "source": "grad_cam.reset_optimizer_weights",
            "target": "h5py.File"
        },
        {
            "id": "e1",
            "source": "grad_cam.reset_optimizer_weights",
            "target": "h5py.File.close"
        },
        {
            "id": "e2",
            "source": "grad_cam.target_category_loss",
            "target": "tensorflow.multiply"
        },
        {
            "id": "e3",
            "source": "grad_cam.target_category_loss",
            "target": "keras.backend.one_hot"
        },
        {
            "id": "e4",
            "source": "grad_cam.normalize",
            "target": "keras.backend.sqrt"
        },
        {
            "id": "e5",
            "source": "grad_cam.normalize",
            "target": "keras.backend.mean"
        },
        {
            "id": "e6",
            "source": "grad_cam.normalize",
            "target": "keras.backend.square"
        },
        {
            "id": "e7",
            "source": "grad_cam.load_image",
            "target": "numpy.expand_dims"
        },
        {
            "id": "e8",
            "source": "grad_cam.load_image",
            "target": "grad_cam.preprocess_input"
        },
        {
            "id": "e9",
            "source": "grad_cam.register_gradient",
            "target": "tensorflow.python.framework.ops._gradient_registry"
        },
        {
            "id": "e10",
            "source": "grad_cam.compile_saliency_function",
            "target": "K.max"
        },
        {
            "id": "e11",
            "source": "grad_cam.compile_saliency_function",
            "target": "K.gradients"
        },
        {
            "id": "e12",
            "source": "grad_cam.compile_saliency_function",
            "target": "K.function"
        },
        {
            "id": "e13",
            "source": "grad_cam.modify_backprop",
            "target": "tensorflow.get_default_graph"
        },
        {
            "id": "e14",
            "source": "grad_cam.modify_backprop",
            "target": "keras.models.load_model"
        },
        {
            "id": "e15",
            "source": "grad_cam.deprocess_image",
            "target": "numpy.ndim"
        },
        {
            "id": "e16",
            "source": "grad_cam.deprocess_image",
            "target": "numpy.squeeze"
        },
        {
            "id": "e17",
            "source": "grad_cam.deprocess_image",
            "target": "keras.backend.image_dim_ordering"
        },
        {
            "id": "e18",
            "source": "grad_cam.compile_gradient_function",
            "target": "grad_cam.target_category_loss"
        },
        {
            "id": "e19",
            "source": "grad_cam.compile_gradient_function",
            "target": "grad_cam.target_category_loss_output_shape"
        },
        {
            "id": "e20",
            "source": "grad_cam.compile_gradient_function",
            "target": "grad_cam.normalize"
        },
        {
            "id": "e21",
            "source": "grad_cam.compile_gradient_function",
            "target": "K.gradients"
        },
        {
            "id": "e22",
            "source": "grad_cam.compile_gradient_function",
            "target": "K.function"
        },
        {
            "id": "e23",
            "source": "grad_cam.calculate_gradient_weighted_CAM",
            "target": "cv2.resize"
        },
        {
            "id": "e24",
            "source": "grad_cam.calculate_gradient_weighted_CAM",
            "target": "numpy.mean"
        },
        {
            "id": "e25",
            "source": "grad_cam.calculate_gradient_weighted_CAM",
            "target": "cv2.applyColorMap"
        },
        {
            "id": "e26",
            "source": "grad_cam.calculate_guided_gradient_CAM",
            "target": "grad_cam.calculate_gradient_weighted_CAM"
        },
        {
            "id": "e27",
            "source": "grad_cam.calculate_guided_gradient_CAM",
            "target": "grad_cam.deprocess_image"
        },
        {
            "id": "e28",
            "source": "grad_cam.calculate_guided_gradient_CAM",
            "target": "saliency_function"
        },
        {
            "id": "e29",
            "source": "grad_cam.calculate_guided_gradient_CAM_v2",
            "target": "grad_cam.calculate_gradient_weighted_CAM"
        },
        {
            "id": "e30",
            "source": "grad_cam.calculate_guided_gradient_CAM_v2",
            "target": "grad_cam.deprocess_image"
        },
        {
            "id": "e31",
            "source": "grad_cam.__main__",
            "target": "keras.models.load_model"
        },
        {
            "id": "e32",
            "source": "grad_cam.__main__",
            "target": "grad_cam.load_image"
        },
        {
            "id": "e33",
            "source": "grad_cam.__main__",
            "target": "model.predict"
        },
        {
            "id": "e34",
            "source": "grad_cam.__main__",
            "target": "numpy.argmax"
        },
        {
            "id": "e35",
            "source": "grad_cam.__main__",
            "target": "grad_cam.compile_gradient_function"
        },
        {
            "id": "e36",
            "source": "grad_cam.__main__",
            "target": "grad_cam.register_gradient"
        },
        {
            "id": "e37",
            "source": "grad_cam.__main__",
            "target": "grad_cam.modify_backprop"
        },
        {
            "id": "e38",
            "source": "grad_cam.__main__",
            "target": "grad_cam.compile_saliency_function"
        },
        {
            "id": "e39",
            "source": "grad_cam.__main__",
            "target": "grad_cam.calculate_guided_gradient_CAM"
        },
        {
            "id": "e40",
            "source": "grad_cam.__main__",
            "target": "cv2.imwrite"
        }
    ]
}