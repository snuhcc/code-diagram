{
    "nodes": [
        {
            "id": "datasets.DataManager",
            "function_name": "DataManager",
            "file": "datasets.py",
            "line_start": 9,
            "line_end": 102,
            "description": "Class for loading FER2013 emotion classification dataset or IMDb gender classification dataset."
        },
        {
            "id": "datasets.DataManager.__init__",
            "function_name": "__init__",
            "file": "datasets.py",
            "line_start": 12,
            "line_end": 28,
            "description": "Initializer for DataManager; sets dataset parameters and determines dataset path."
        },
        {
            "id": "datasets.DataManager.get_data",
            "function_name": "get_data",
            "file": "datasets.py",
            "line_start": 30,
            "line_end": 37,
            "description": "Select and call the appropriate loader based on dataset_name."
        },
        {
            "id": "datasets.DataManager._load_imdb",
            "function_name": "_load_imdb",
            "file": "datasets.py",
            "line_start": 39,
            "line_end": 57,
            "description": "Load and filter the IMDb dataset from a .mat file."
        },
        {
            "id": "datasets.DataManager._load_fer2013",
            "function_name": "_load_fer2013",
            "file": "datasets.py",
            "line_start": 59,
            "line_end": 72,
            "description": "Load FER2013 dataset from CSV, convert pixel strings to images and one-hot encode emotions."
        },
        {
            "id": "datasets.DataManager._load_KDEF",
            "function_name": "_load_KDEF",
            "file": "datasets.py",
            "line_start": 74,
            "line_end": 102,
            "description": "Walk through KDEF folders, load and preprocess images, and one-hot encode emotions."
        },
        {
            "id": "datasets.get_labels",
            "function_name": "get_labels",
            "file": "datasets.py",
            "line_start": 105,
            "line_end": 114,
            "description": "Return a dictionary mapping class indices to labels for the specified dataset."
        },
        {
            "id": "datasets.get_class_to_arg",
            "function_name": "get_class_to_arg",
            "file": "datasets.py",
            "line_start": 117,
            "line_end": 126,
            "description": "Return a dictionary mapping class labels to indices for the specified dataset."
        },
        {
            "id": "datasets.split_imdb_data",
            "function_name": "split_imdb_data",
            "file": "datasets.py",
            "line_start": 129,
            "line_end": 137,
            "description": "Split IMDb ground truth dictionary keys into training and validation sets."
        },
        {
            "id": "datasets.split_data",
            "function_name": "split_data",
            "file": "datasets.py",
            "line_start": 139,
            "line_end": 149,
            "description": "Split feature and label arrays into training and validation datasets."
        }
    ],
    "edges": [
        {
            "id": "datasets.e0",
            "source": "datasets.DataManager.get_data",
            "target": "datasets.DataManager._load_imdb"
        },
        {
            "id": "datasets.e1",
            "source": "datasets.DataManager.get_data",
            "target": "datasets.DataManager._load_fer2013"
        },
        {
            "id": "datasets.e2",
            "source": "datasets.DataManager.get_data",
            "target": "datasets.DataManager._load_KDEF"
        },
        {
            "id": "datasets.e3",
            "source": "datasets.DataManager._load_imdb",
            "target": "scipy.io.loadmat"
        },
        {
            "id": "datasets.e4",
            "source": "datasets.DataManager._load_imdb",
            "target": "numpy.isnan"
        },
        {
            "id": "datasets.e5",
            "source": "datasets.DataManager._load_imdb",
            "target": "numpy.logical_not"
        },
        {
            "id": "datasets.e6",
            "source": "datasets.DataManager._load_imdb",
            "target": "numpy.logical_and"
        },
        {
            "id": "datasets.e7",
            "source": "datasets.DataManager._load_fer2013",
            "target": "pandas.read_csv"
        },
        {
            "id": "datasets.e8",
            "source": "datasets.DataManager._load_fer2013",
            "target": "numpy.asarray"
        },
        {
            "id": "datasets.e9",
            "source": "datasets.DataManager._load_fer2013",
            "target": "cv2.resize"
        },
        {
            "id": "datasets.e10",
            "source": "datasets.DataManager._load_fer2013",
            "target": "numpy.expand_dims"
        },
        {
            "id": "datasets.e11",
            "source": "datasets.DataManager._load_fer2013",
            "target": "pandas.get_dummies"
        },
        {
            "id": "datasets.e12",
            "source": "datasets.DataManager._load_fer2013",
            "target": "pandas.DataFrame.as_matrix"
        },
        {
            "id": "datasets.e13",
            "source": "datasets.DataManager._load_KDEF",
            "target": "datasets.get_class_to_arg"
        },
        {
            "id": "datasets.e14",
            "source": "datasets.DataManager._load_KDEF",
            "target": "os.walk"
        },
        {
            "id": "datasets.e15",
            "source": "datasets.DataManager._load_KDEF",
            "target": "os.path.join"
        },
        {
            "id": "datasets.e16",
            "source": "datasets.DataManager._load_KDEF",
            "target": "numpy.zeros"
        },
        {
            "id": "datasets.e17",
            "source": "datasets.DataManager._load_KDEF",
            "target": "cv2.imread"
        },
        {
            "id": "datasets.e18",
            "source": "datasets.DataManager._load_KDEF",
            "target": "cv2.resize"
        },
        {
            "id": "datasets.e19",
            "source": "datasets.DataManager._load_KDEF",
            "target": "os.path.basename"
        },
        {
            "id": "datasets.e20",
            "source": "datasets.split_imdb_data",
            "target": "random.shuffle"
        }
    ]
}