[src/components/ChatUI.tsx]
'use client';

import { useState, useRef, useEffect, FormEvent } from 'react';

function SendIcon() {
  return (
    <svg className="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
      <path d="M2 21L23 12L2 3L2 10L17 12L2 14L2 21Z" />
    </svg>
  );
}

const apiUrl = process.env.NEXT_PUBLIC_API_BASE_URL || '';

export default function ChatUI() {
  const [input, setInput] = useState('');
  const [log, setLog] = useState<{ role: 'user' | 'bot'; t: string }[]>([]);
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const listRef = useRef<HTMLDivElement>(null);
  const sessionIdRef = useRef<string | null>(null);

  useEffect(() => {
    async function openSession() {
      try {
        const res = await fetch(`${apiUrl}/api/chatbot/session/open`, { method: 'GET' });
        if (!res.ok) throw new Error(`Failed to open session: ${res.status} ${res.statusText}`);
        const data = await res.json();
        setSessionId(data.session_id);
        sessionIdRef.current = data.session_id;
      } catch (error) {
        console.error('Failed to open session:', error);
        setError('Failed to connect to chatbot. Please try again later.');
      }
    }
    openSession();

    return () => {
      const id = sessionIdRef.current;
      if (id) {
        fetch(`${apiUrl}/api/chatbot/session/close`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ session_id: id }),
        });
      }
    };
  }, []);

  async function send(e: FormEvent) {
    e.preventDefault();
    if (!input.trim() || !sessionId) return;

    setLog((l) => [...l, { role: 'user', t: input }]);

    const body = JSON.stringify({
      session_id: sessionId,
      query: input,
      code: '',
      diagram: '',
    });

    try {
      const res = await fetch(`${apiUrl}/api/chatbot/session/chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body,
      });
      console.log('res', res);
      if (!res.ok) throw new Error(`Failed to send message: ${res.status} ${res.statusText}`);
      const data = await res.json();
      const text = data.answer;
      console.log('text', text);
      setLog((l) => [...l, { role: 'bot', t: text }]);
    } catch (error) {
      console.error('Failed to send message:', error);
      setLog((l) => [...l, { role: 'bot', t: 'Error: Failed to send message. Please try again.' }]);
    }

    setInput('');
  }

  useEffect(() => {
    listRef.current?.scrollTo({ top: listRef.current.scrollHeight, behavior: 'smooth' });
  }, [log]);

  return (
    <div className="flex flex-col h-full bg-slate-50 border-t border-slate-300">
      <div ref={listRef} className="flex-1 overflow-y-auto p-2 space-y-2">
        {error ? (
          <div className="p-2 text-red-600">{error}</div>
        ) : log.length === 0 && !sessionId ? (
          <div className="text-center text-gray-500">Connecting to chatbot...</div>
        ) : (
          log.map((m, i) => (
            <div key={i} className={m.role === 'user' ? 'flex justify-end' : 'flex justify-start'}>
              <div
                className={
                  m.role === 'user'
                    ? 'bg-sky-100 text-sky-800 rounded-md px-3 py-2 max-w-[70%] whitespace-pre-wrap'
                    : 'bg-gray-200 text-gray-800 rounded-md px-3 py-2 max-w-[70%] whitespace-pre-wrap'
                }
              >
                {m.t}
              </div>
            </div>
          ))
        )}
      </div>

      <form onSubmit={send} className="flex items-center border-t border-slate-300 p-2">
        <textarea
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="flex-1 bg-white text-sm p-2 resize-none outline-none rounded border border-slate-300"
          rows={1}
          placeholder="Ask something…"
        />
        <button
          type="submit"
          disabled={!sessionId}
          className={`ml-2 w-10 h-10 flex items-center justify-center rounded transition-colors ${
            sessionId ? 'bg-sky-600 hover:bg-sky-700' : 'bg-gray-400 cursor-not-allowed'
          } text-white`}
        >
          <SendIcon />
        </button>
      </form>
    </div>
  );
}


[src/components/CodeViewer.tsx]
'use client';

import { useEffect, useState } from 'react';
import Editor from '@monaco-editor/react';

export default function CodeViewer({ filePath }: { filePath: string }) {
  const [code, setCode] = useState('// loading…');

  /* ① 실제 파일 내용 가져오기 -------------------------------------- */
  useEffect(() => {
    (async () => {
      const c = await fetch(`/api/file?path=${encodeURIComponent(filePath)}`).then((r) =>
        r.text()
      );
      setCode(c);
    })();
  }, [filePath]);

  /* ② 확장자로 언어 결정 ----------------------------------------- */
  const lang = (() => {
    if (filePath.endsWith('.tsx') || filePath.endsWith('.ts')) return 'typescript';
    if (filePath.endsWith('.py')) return 'python';
    if (filePath.endsWith('.md')) return 'markdown';
    return 'plaintext';
  })();

  /* ③ 에디터 + 제목 바 ------------------------------------------- */
  return (
    <div className="h-full bg-slate-100 rounded-md shadow-sm overflow-hidden">
      <div className="h-8 flex items-center px-3 bg-slate-200 border-b border-slate-300 text-xs">
        {filePath.split('/').pop()}
      </div>
      <Editor
        height="calc(100% - 2rem)"
        defaultLanguage={lang}
        value={code}
        theme="vs-dark"
        options={{
          minimap: { enabled: true },
          fontSize: 14,
          automaticLayout: true,
          readOnly: true,
        }}
      />
    </div>
  );
}


[src/components/DiagramViewer.tsx]
// frontend/src/components/DiagramViewer.tsx
'use client';

import { useState, useEffect } from 'react';
import {
  ReactFlow,
  Background,
  MiniMap,
  Controls,
  MarkerType,
  type Node,
  type Edge,
  type NodeMouseHandler,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';
import dagre from 'dagre';
import { nanoid } from 'nanoid';
import { useEditor } from '@/store/editor';
import { useFS, type FileNode } from '@/store/files';

/* ────────────────────────── 전역 캐시 ────────────────────────── */
let diagramCache: DiagramJSON | null = null;
const snippetCache = new Map<string, string>(); // <cleanPath, preview>

/* ─────────────────── dagre 레이아웃 유틸 ──────────────────── */
function layout(nodes: Node[] = [], edges: Edge[] = []): Node[] {
  const g = new dagre.graphlib.Graph().setGraph({
    rankdir: 'TB',
    nodesep: 50,
    ranksep: 70,
  });
  g.setDefaultEdgeLabel(() => ({}));

  nodes.forEach((n) => g.setNode(n.id, { width: 160, height: 40 }));
  edges.forEach((e) => g.setEdge(e.source, e.target));
  dagre.layout(g);

  return nodes.map((n) => {
    const { x, y } = g.node(n.id);
    return { ...n, position: { x, y } };
  });
}

/* ────────────────────── 공통 타입 ─────────────────────────── */
interface RawNode {
  id: string;
  label: string;
  file: string;
}
interface RawEdge {
  id: string;
  source: string;
  target: string;
  type?: string;
}
interface DiagramJSON {
  nodes: RawNode[];
  edges: RawEdge[];
}

/* ──────────────────── API ENDPOINT ───────────────────────── */
const ENDPOINT = '/api/generate_control_flow_graph';

/* ──────────────────── 컴포넌트 ───────────────────────────── */
export default function DiagramViewer({ filePath }: { filePath: string }) {
  /* ─── 상태 ────────────────────────────────────────────── */
  const [baseNodes, setBaseNodes] = useState<Node[]>([]);
  const [edges, setEdges] = useState<Edge[]>([]);
  const [loading, setLoad] = useState(true);
  const [error, setErr] = useState<string>();
  const [hoverId, setHoverId] = useState<string | null>(null);
  const [snippet, setSnippet] = useState<string>('');

  /* ─── zustand 스토어 ─────────────────────────────────── */
  const editorState = useEditor.getState();
  const fsState = useFS.getState();

  /* ─── 현재 에디터에 열린 파일 경로 ─────────────────────── */
  const activePath =
    editorState.tabs.find((t) => t.id === editorState.activeId)?.path ??
    editorState.tabs.at(-1)?.path ??
    '';

  /* ─── 노드 클릭: 코드 탭 열고 탐색기 하이라이트 ────────── */
  const onNodeClick: NodeMouseHandler = (_, node) => {
    const raw = (node.data as any)?.file as string | undefined;
    if (!raw) return;

    const clean = raw.replace(/^poc[\\/]/, '');
    editorState.open({
      id: nanoid(),
      path: clean,
      name: clean.split(/[\\/]/).pop() ?? clean,
    });

    const target = findByPath(fsState.tree, clean);
    if (target) fsState.setCurrent(target.id);
  };

  /* ─── hover 진입/이탈 ─────────────────────────────────── */
  const onEnter: NodeMouseHandler = async (_, node) => {
    setHoverId(node.id);

    const raw = (node.data as any)?.file as string | undefined;
    if (!raw) {
      setSnippet('');
      return;
    }
    const clean = raw.replace(/^poc[\\/]/, '');

    if (snippetCache.has(clean)) {
      setSnippet(snippetCache.get(clean)!);
      return;
    }

    try {
      const txt = await fetch(
        `/api/file?path=${encodeURIComponent(clean)}`
      ).then((r) => r.text());
      const preview = txt.split('\n').slice(0, 15).join('\n');
      snippetCache.set(clean, preview);
      setSnippet(preview);
    } catch {
      setSnippet('(preview unavailable)');
    }
  };

  const onLeave: NodeMouseHandler = () => {
    setHoverId(null);
    setSnippet('');
  };

  /* ─── 다이어그램 로딩 & 캐시 ───────────────────────────── */
  useEffect(() => {
    (async () => {
      if (diagramCache) {
        hydrate(diagramCache);
        setLoad(false);
        return;
      }

      setLoad(true);
      setErr(undefined);

      try {
        const res = await fetch(`http://localhost:8000${ENDPOINT}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({}),
        });
        if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);

        const raw = await res.json();
        const json: DiagramJSON =
          typeof raw === 'string'
            ? JSON.parse(raw)
            : typeof raw?.data === 'string'
            ? JSON.parse(raw.data)
            : raw?.data ?? raw;

        diagramCache = json;
        hydrate(json);
      } catch (e: any) {
        setErr(String(e));
        setBaseNodes([]);
        setEdges([]);
      } finally {
        setLoad(false);
      }
    })();
  }, [filePath]);

  /* ─── 노드 스타일 계산 ───────────────────────────────── */
  const nodes = baseNodes.map((n) => {
    const clean = (n.data as any)?.file?.replace(/^poc[\\/]/, '');
    const isActive = clean === activePath;
    const isHover = hoverId === n.id;

    return {
      ...n,
      style: {
        ...n.style,
        background: isHover
          ? '#fef9c3' // yellow-100
          : isActive
          ? '#dbeafe' // sky-100
          : '#ffffff',
        border: isHover
          ? '2px solid #eab308' // yellow-600
          : isActive
          ? '2px solid #0284c7' // sky-600
          : '1px solid #3b82f6',
        transition: 'all 0.1s ease-in-out',
      },
    };
  });

  /* ─── 로딩·에러 분기 ──────────────────────────────────── */
  if (loading)
    return <div className="p-4 text-sm text-slate-500">diagram loading…</div>;
  if (error)
    return (
      <div className="p-4 text-sm text-red-600 whitespace-pre-wrap">
        {error}
      </div>
    );

  /* ─── 렌더링 ──────────────────────────────────────────── */
  return (
    <div className="relative h-full w-full border-l border-slate-300">
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodeClick={onNodeClick}
        onNodeMouseEnter={onEnter}
        onNodeMouseLeave={onLeave}
        fitView
        minZoom={0.2}
        maxZoom={2}
        className="bg-gray-50"
      >
        <Background variant="dots" gap={16} size={1} />
        <MiniMap pannable zoomable />
        <Controls />
      </ReactFlow>

      {/* ─── 우측 하단 코드 스니펫 패널 ─────────────────── */}
      {hoverId && snippet && (
        <div
          className="absolute bottom-2 right-2 w-[340px] max-h-[220px]
                     bg-slate-800 text-slate-100 text-xs
                     rounded shadow-lg p-3 overflow-auto
                     whitespace-pre font-mono"
        >
          {snippet}
        </div>
      )}
    </div>
  );

  /* ─── JSON → 상태 반영 ───────────────────────────────── */
  function hydrate(json: DiagramJSON) {
    const n: Node[] = json.nodes.map((r) => ({
      id: r.id,
      data: { label: r.label, file: r.file },
      position: { x: 0, y: 0 },
      style: {
        padding: 6,
        borderRadius: 4,
        border: '1px solid #3b82f6',
        background: '#fff',
      },
    }));

    const e: Edge[] = json.edges.map((r) => ({
      id: r.id,
      source: r.source,
      target: r.target,
      markerEnd: { type: MarkerType.ArrowClosed },
      animated: true,
    }));

    setBaseNodes(layout(n, e));
    setEdges(e);
  }
}

/* ─────────────────── FileNode 경로 매칭 ─────────────────── */
function findByPath(
  nodes: FileNode[] = [],
  p: string
): FileNode | undefined {
  for (const n of nodes) {
    if (n.path?.replace(/^poc[\\/]/, '') === p) return n;
    if (n.children) {
      const r = findByPath(n.children, p);
      if (r) return r;
    }
  }
}


[src/components/EditorTabs.tsx]
'use client';

import { useEffect, useState } from 'react';
import Editor from '@monaco-editor/react';
import { useEditor } from '@/store/editor';

/* ─── 개별 코드 탭 ─────────────────────────────────────────── */
function CodePane({ path }: { path: string }) {
  const [code, setCode] = useState('// loading…');
  const [err, setErr] = useState<string>();

  useEffect(() => {
    let active = true;
    (async () => {
      const res = await fetch(`/api/file?path=${encodeURIComponent(path)}`);
      if (!active) return;

      if (res.ok) {
        setCode(await res.text());
      } else {
        const { error } = await res.json().catch(() => ({ error: res.statusText }));
        setErr(`${res.status}: ${error}`);
      }
    })();
    return () => {
      active = false;
    };
  }, [path]);

  const lang = (() => {
    if (path.endsWith('.py')) return 'python';
    if (path.endsWith('.tsx') || path.endsWith('.ts')) return 'typescript';
    if (path.endsWith('.md')) return 'markdown';
    return 'plaintext';
  })();

  if (err) {
    return (
      <pre className="p-4 text-sm text-red-600 whitespace-pre-wrap">{err}</pre>
    );
  }

  return (
    <Editor
      height="calc(100% - 2rem)" // 상단 탭바 높이 제외
      defaultLanguage={lang}
      value={code}
      theme="vs-dark"
      options={{
        readOnly: true,
        fontSize: 14,
        minimap: { enabled: true },
        automaticLayout: true,
      }}
    />
  );
}

/* ─── 탭 컨테이너 ─────────────────────────────────────────── */
export default function EditorTabs() {
  const { tabs, activeId, setActive, close } = useEditor();

  if (!tabs.length) {
    return (
      <div className="h-full flex items-center justify-center text-sm text-slate-500">
        Open a file to begin
      </div>
    );
  }

  const active = tabs.find((t) => t.id === activeId) ?? tabs[0];

  return (
    <div className="flex flex-col h-full">
      {/* 탭 헤더 */}
      <div className="h-8 flex items-center bg-slate-200 border-b border-slate-300 select-none">
        {tabs.map((t) => {
          const on = t.id === active.id;
          return (
            <div
              key={t.id}
              onClick={() => setActive(t.id)}
              className={
                'h-full flex items-center px-3 text-xs cursor-pointer border-r border-slate-300 transition-colors ' +
                (on
                  ? 'bg-white text-sky-700 font-semibold border-b-2 border-b-sky-600'
                  : 'text-slate-600 hover:bg-slate-100 border-b-2 border-b-transparent')
              }
            >
              {t.name}
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  close(t.id);
                }}
                className="ml-2 text-slate-400 hover:text-slate-600 transition-colors"
              >
                ×
              </button>
            </div>
          );
        })}
      </div>

      {/* 코드 영역 */}
      <div className="flex-1">
        <CodePane path={active.path} />
      </div>
    </div>
  );
}


[src/components/FileExplorer.tsx]
// frontend/src/components/FileExplorer.tsx
'use client';

import { useEffect, useState } from 'react';
import clsx from 'clsx';
import { useFS, FileNode } from '@/store/files';
import { useEditor } from '@/store/editor';
import { nanoid } from 'nanoid';

function filterTree(nodes: FileNode[] = []): FileNode[] {
  return nodes
    .filter((n) => n.name !== '__pycache__')
    .map((n) =>
      Array.isArray(n.children)
        ? { ...n, children: filterTree(n.children) }
        : n
    );
}

const arr = (x: FileNode[] | FileNode | undefined): FileNode[] =>
  Array.isArray(x) ? x : x ? [x] : [];

function Row({
  n,
  depth,
  isDir,
  isOpen,
  isActive,
  onClick,
}: {
  n: FileNode;
  depth: number;
  isDir: boolean;
  isOpen: boolean;
  isActive: boolean;
  onClick: () => void;
}) {
  return (
    <div
      style={{ paddingLeft: depth * 12 }}
      className={clsx(
        'cursor-pointer select-none text-xs py-[2px] px-1',
        'hover:bg-slate-100 transition-colors',
        isActive && 'bg-sky-100 text-sky-700'
      )}
      onClick={onClick}
    >
      {isDir ? (isOpen ? '▾ ' : '▸ ') : '  '}
      {n.name}
    </div>
  );
}

export default function FileExplorer() {
  const { tree, current, setCurrent, load } = useFS();
  const [open, setOpen] = useState<Record<string, boolean>>({ poc: true });
  const { activePath } = useEditor(); // 추가: 활성화된 파일 경로 가져오기

  useEffect(() => {
    (async () => {
      const data: FileNode[] = await fetch('/api/files').then((r) => r.json());
      load(filterTree(data));
    })();
  }, [load]);

  const click = (n: FileNode) => {
    if (Array.isArray(n.children)) {
      setOpen((o) => ({ ...o, [n.path ?? '']: !o[n.path ?? ''] }));
    } else if (n.path) {
      const clean = n.path.replace(/^poc[\\/]/, '');
      setCurrent(n.id);
      useEditor.getState().open({
        id: nanoid(),
        path: clean,
        name: n.name,
      });
    }
  };

  const render = (nodes: FileNode[] | FileNode | undefined, depth = 0): JSX.Element[] =>
    arr(nodes).map((n) => {
      const isDir = Array.isArray(n.children);
      const isOpen = !!open[n.path ?? ''];
      const isActive = n.path?.replace(/^poc[\\/]/, '') === activePath; // 수정: activePath로 비교

      return (
        <div key={n.id}>
          <Row
            n={n}
            depth={depth}
            isDir={isDir}
            isOpen={isOpen}
            isActive={isActive}
            onClick={() => click(n)}
          />
          {isDir && isOpen && render(n.children, depth + 1)}
        </div>
      );
    });

  return (
    <aside className="w-full pl-2 h-full overflow-y-auto border-r border-slate-300 bg-slate-50">
      {render(tree)}
    </aside>
  );
}

[src/components/IconBar.tsx]
'use client';

import {
  FolderIcon,
  Squares2X2Icon,
  ChatBubbleLeftRightIcon,
} from '@heroicons/react/24/outline';
import type { ComponentType, SVGProps } from 'react';

type IconType = ComponentType<SVGProps<SVGSVGElement>>;
interface Props {
  states: { exp: boolean; dia: boolean; chat: boolean };
  toggle: { exp: () => void; dia: () => void; chat: () => void };
}

export default function IconBar({ states, toggle }: Props) {
  const Btn = ({
    on,
    click,
    Icon,
  }: {
    on: boolean;
    click: () => void;
    Icon: IconType;
  }) => (
    <button
      onClick={click}
      className={
        'w-10 h-10 flex items-center justify-center transition-colors ' +
        (on ? 'bg-white' : 'hover:bg-slate-100')
      }
    >
      <Icon className={'w-6 ' + (on ? 'stroke-sky-600' : 'stroke-slate-600')} />
    </button>
  );

  return (
    <div className="flex flex-col border-r border-slate-300 bg-slate-200">
      <Btn on={states.exp} click={toggle.exp} Icon={FolderIcon} />
      <Btn on={states.dia} click={toggle.dia} Icon={Squares2X2Icon} />
      <Btn on={states.chat} click={toggle.chat} Icon={ChatBubbleLeftRightIcon} />
    </div>
  );
}


[src/app/page.tsx]
'use client';

import { useState } from 'react';
import dynamic from 'next/dynamic';
import { useFS } from '@/store/files';
import { Panel, PanelGroup, PanelResizeHandle } from 'react-resizable-panels';

import IconBar      from '@/components/IconBar';
import FileExplorer from '@/components/FileExplorer';

const EditorTabs    = dynamic(() => import('@/components/EditorTabs'),    { ssr: false });
const DiagramViewer = dynamic(() => import('@/components/DiagramViewer'), { ssr: false });
const ChatUI        = dynamic(() => import('@/components/ChatUI'),        { ssr: false });

/* ─── Resize handles ────────────────────────────────────────────── */
const HHandle = () => (
  <PanelResizeHandle className="w-[4px] bg-slate-300 hover:bg-sky-600 cursor-col-resize transition-colors" />
);
const VHandle = () => (
  <PanelResizeHandle className="h-[4px] bg-slate-300 hover:bg-sky-600 cursor-row-resize transition-colors" />
);

export default function Home() {
  const { current }         = useFS();
  const [showExp, setExp]   = useState(true);
  const [showDia, setDia]   = useState(true);
  const [showChat, setChat] = useState(true);

  return (
    <div className="flex h-full">
      {/* ─── Activity / Icon bar ─────────────────────────────────── */}
      <IconBar
        states={{ exp: showExp, dia: showDia, chat: showChat }}
        toggle={{
          exp:  () => setExp(!showExp),
          dia:  () => setDia(!showDia),
          chat: () => setChat(!showChat),
        }}
      />

      {/* ─── Main panel group (horizontal) ───────────────────────── */}
      <PanelGroup direction="horizontal" className="flex-1">

        {/* ─── File-explorer column ──────────────────────────────── */}
        {showExp && (
          <>
            <Panel defaultSize={15} minSize={12}>
              <FileExplorer />
            </Panel>
            <HHandle />
          </>
        )}

        {/* ─── Code-editor column ────────────────────────────────── */}
        <Panel defaultSize={55} minSize={30} className="border-x border-slate-300">
          <EditorTabs />
        </Panel>

        {(showDia || showChat) && <HHandle />}

        {/* ─── Diagram / Chat column (vertical split) ────────────── */}
        {(showDia || showChat) && (
          <Panel defaultSize={30} minSize={18} className="flex-1 min-w-0">
            <PanelGroup direction="vertical">

              {/* ── Diagram viewer ─────────────────────────────── */}
              {showDia && (
                <>
                  <Panel defaultSize={70} minSize={30}>
                    {current && <DiagramViewer filePath={current.path} />}
                  </Panel>
                  {showChat && <VHandle />}
                </>
              )}

              {/* ── Chat UI ─────────────────────────────────────── */}
              {showChat && (
                <Panel defaultSize={30} minSize={20}>
                  <ChatUI />
                </Panel>
              )}

            </PanelGroup>
          </Panel>
        )}
      </PanelGroup>
    </div>
  );
}


[src/app/globals.css]
/* src/app/globals.css */
@import 'tailwindcss';

/* ─── 라이트 팔레트 ─── */
:root{
  --background: #ffffff;
  --foreground: #171717;
  --panel:      #f3f3f3;
  --border:     #e5e5e5;
  --side:       #eeeeee;
  --accent:     #0078d4;
}

/* ─── 다크 팔레트 ─── */
@media (prefers-color-scheme:dark){
  :root{
    --background: #1e1e1e;
    --foreground: #ededed;
    --panel:      #252526;
    --border:     #3c3c3c;
    --side:       #333337;
    --accent:     #569cd6;
  }
}

/* 기본 레이아웃 */
html, body {
  height: 100%;
}
body {
  background: var(--background);
  color: var(--foreground);
  font-family: system-ui, Arial, Helvetica, sans-serif;
  font-size: 14px;
  margin: 0;
  padding: 0;
  overscroll-behavior: none;
}

/* Custom Scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
::-webkit-scrollbar-thumb {
  background-color: var(--border);
  border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
  background-color: var(--accent);
}

/* 선택 행 하이라이트 */
.vscode-tree-active{
  background: var(--side);
  color: var(--accent);
}

/* Transition classes for smoother toggles, hovers, etc. */
.transition-colors {
  transition: color 0.15s ease, background-color 0.15s ease;
}


[src/store/editor.ts]
// frontend/src/store/editor.ts
'use client';

import { create } from 'zustand';
import { immer } from 'zustand/middleware/immer';
import { useFS } from '@/store/files'; // 추가: 파일 탐색기 상태 접근

export interface TabMeta {
  id: string;    // nanoid()
  path: string;  // '/src/App.tsx'
  name: string;  // 'App.tsx'
}

interface State {
  tabs: TabMeta[];
  activeId?: string;
  activePath?: string; // 추가: 활성화된 파일 경로 추적
  open: (file: TabMeta) => void;
  close: (id: string) => void;
  setActive: (id: string) => void;
}

export const useEditor = create<State>()(
  immer((set) => ({
    tabs: [],
    activeId: undefined,
    activePath: undefined, // 초기값 설정
    open: (file) =>
      set((s) => {
        if (!s.tabs.find((t) => t.path === file.path)) s.tabs.push(file);
        s.activeId = s.tabs.find((t) => t.path === file.path)?.id ?? file.id;
        s.activePath = file.path; // 파일 열 때 경로 설정
      }),
    close: (id) =>
      set((s) => {
        s.tabs = s.tabs.filter((t) => t.id !== id);
        if (s.activeId === id) {
          const lastTab = s.tabs.at(-1);
          s.activeId = lastTab?.id;
          s.activePath = lastTab?.path; // 탭 닫을 때 경로 업데이트
        }
      }),
    setActive: (id) =>
      set((s) => {
        s.activeId = id;
        s.activePath = s.tabs.find((t) => t.id === id)?.path; // 탭 변경 시 경로 업데이트
        if (s.activePath) {
          const node = findByPath(useFS.getState().tree, s.activePath);
          if (node) useFS.getState().setCurrent(node.id); // 파일 탐색기 동기화
        }
      }),
  }))
);

// 파일 경로로 FileNode를 찾는 유틸리티 함수
function findByPath(nodes: FileNode[], path: string): FileNode | undefined {
  for (const n of nodes) {
    if (n.path?.replace(/^poc[\\/]/, '') === path) return n;
    if (n.children) {
      const r = findByPath(n.children, path);
      if (r) return r;
    }
  }
}

[src/store/files.ts]
import { create } from 'zustand'

export type FileNode = { id: string; name: string; path: string; children?: FileNode[] }

interface FSState {
  tree: FileNode[]
  current?: FileNode
  setCurrent: (id: string) => void
  load: (t: FileNode[]) => void
}

export const useFS = create<FSState>(set => ({
  tree: [],
  current: undefined,
  setCurrent: id => set(s => ({ current: find(s.tree, id) })),
  load: tree => set({ tree })
}))

function find(nodes: FileNode[], id: string): FileNode | undefined {
  for (const n of nodes) {
    if (n.id === id) return n
    if (n.children) {
      const r = find(n.children, id)
      if (r) return r
    }
  }
}


[backend/app/main.py]
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
from pathlib import Path
from schemas.common import *
from llm.diagram_generator import generate_control_flow_graph
from llm.chatbot import create_session, remove_session, generate_chatbot_answer_with_session, get_session_history
from fastapi.responses import JSONResponse

import json

# .env file loading
load_dotenv()

# FastAPI app initialization
app = FastAPI(title="Code-Diagram API")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # 프론트엔드 도메인으로 제한 가능
    allow_credentials=True,
    allow_methods=["*"],  # 모든 HTTP 메서드 허용
    allow_headers=["*"],  # 모든 헤더 허용
)

# Define the path to the HTML template
HTML_PATH = Path(__file__).parent / "html" / "root.html"

# API Endpoint
@app.get("/", response_class=HTMLResponse)
async def root():
    try:
        # Read the HTML content from the file
        html_content = HTML_PATH.read_text(encoding="utf-8")
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(content="<h1>Template not found</h1>", status_code=404)

@app.post("/api/generate_control_flow_graph", response_model=DiagramResponse)
async def api_generate_control_flow_graph(request: DiagramRequest):
    """
    Generate a control flow graph (CFG) for the given code.
    """
    try:

        json_data = await generate_control_flow_graph(request.path, request.file_type)
        result = {
            "data": json_data
        }
        print(result)
        return DiagramResponse(**result)
    except Exception as e:
        return DiagramResponse(status=500, data=str(e))
    
@app.get("/api/sample_cfg")
async def sample_cfg():
    """artifacts/cfg_json_output.json 파일 그대로 반환"""
    json_path = Path(__file__).parent / "artifacts" / "stored_poc" / "cfg_json_output_all.json"
    data = json.loads(json_path.read_text(encoding="utf-8"))
    return JSONResponse(content=data)

@app.get("/api/chatbot/session/open")
async def api_open_session():
    try:
        session_id = create_session()
        return SessionResponse(session_id=session_id)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/chatbot/session/close")
async def api_close_session(req: SessionRequest):
    try:
        if not req.session_id:
            raise HTTPException(status_code=400, detail="Session ID is required")
        remove_session(req.session_id)
        return {"status": "closed"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/chatbot/session/chat", response_model=ChatbotQueryResponse)
async def api_session_chat(req: ChatbotQueryRequest):
    try:
        if not req.session_id:
            raise HTTPException(status_code=400, detail="Session ID is required")
        if not req.query:
            raise HTTPException(status_code=400, detail="Query is required")
        print(f"Session ID: {req.session_id}")
        print(f"Query: {req.query}")
        print(f"Code: {req.code}")
        print(f"Diagram: {req.diagram}")
        answer, highlight = await generate_chatbot_answer_with_session(
            req.session_id, req.query, req.code, req.diagram
        )
        return ChatbotQueryResponse(answer=answer, highlight=highlight)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    
@app.get("/api/chatbot/session/get_history")
async def api_get_session_history(session_id: str):
    try:
        if not session_id:
            raise HTTPException(status_code=400, detail="Session ID is required")
        history = get_session_history(session_id)
        return {"session_id": session_id, "history": history}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

