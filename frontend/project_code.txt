[frontend/src/components/ChatUI.tsx]
'use client';

import { useState, useRef, useEffect, FormEvent } from 'react';

function SendIcon() {
  return (
    <svg className="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
      <path d="M2 21L23 12L2 3L2 10L17 12L2 14L2 21Z" />
    </svg>
  );
}

export default function ChatUI() {
  const [input, setInput] = useState('');
  const [log, setLog] = useState<{ role: 'user' | 'bot'; t: string }[]>([]);
  const listRef = useRef<HTMLDivElement>(null);

  async function send(e: FormEvent) {
    e.preventDefault();
    if (!input.trim()) return;

    setLog((l) => [...l, { role: 'user', t: input }]);

    const res = await fetch('/api/chat', { method: 'POST', body: input });
    const text = await res.text();

    setLog((l) => [...l, { role: 'bot', t: text }]);
    setInput('');
  }

  useEffect(() => {
    listRef.current?.scrollTo({ top: listRef.current.scrollHeight, behavior: 'smooth' });
  }, [log]);

  return (
    <div className="flex flex-col h-full bg-slate-50 border-t border-slate-300">
      <div ref={listRef} className="flex-1 overflow-y-auto p-2 space-y-2">
        {log.map((m, i) => (
          <div key={i} className={m.role === 'user' ? 'flex justify-end' : 'flex justify-start'}>
            <div
              className={
                m.role === 'user'
                  ? 'bg-sky-100 text-sky-800 rounded-md px-3 py-2 max-w-[70%] whitespace-pre-wrap'
                  : 'bg-gray-200 text-gray-800 rounded-md px-3 py-2 max-w-[70%] whitespace-pre-wrap'
              }
            >
              {m.t}
            </div>
          </div>
        ))}
      </div>

      <form onSubmit={send} className="flex items-center border-t border-slate-300 p-2">
        <textarea
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="flex-1 bg-white text-sm p-2 resize-none outline-none rounded border border-slate-300"
          rows={1}
          placeholder="Ask something…"
        />

        <button
          type="submit"
          className="ml-2 w-10 h-10 flex items-center justify-center bg-sky-600 hover:bg-sky-700 text-white rounded transition-colors"
        >
          <SendIcon />
        </button>
      </form>
    </div>
  );
}


[frontend/src/components/CodeViewer.tsx]
'use client';

import { useEffect, useState } from 'react';
import Editor from '@monaco-editor/react';

export default function CodeViewer({ filePath }: { filePath: string }) {
  const [code, setCode] = useState('// loading…');

  /* ① 실제 파일 내용 가져오기 -------------------------------------- */
  useEffect(() => {
    (async () => {
      const c = await fetch(`/api/file?path=${encodeURIComponent(filePath)}`).then((r) =>
        r.text()
      );
      setCode(c);
    })();
  }, [filePath]);

  /* ② 확장자로 언어 결정 ----------------------------------------- */
  const lang = (() => {
    if (filePath.endsWith('.tsx') || filePath.endsWith('.ts')) return 'typescript';
    if (filePath.endsWith('.py')) return 'python';
    if (filePath.endsWith('.md')) return 'markdown';
    return 'plaintext';
  })();

  /* ③ 에디터 + 제목 바 ------------------------------------------- */
  return (
    <div className="h-full bg-slate-100 rounded-md shadow-sm overflow-hidden">
      <div className="h-8 flex items-center px-3 bg-slate-200 border-b border-slate-300 text-xs">
        {filePath.split('/').pop()}
      </div>
      <Editor
        height="calc(100% - 2rem)"
        defaultLanguage={lang}
        value={code}
        theme="vs-dark"
        options={{
          minimap: { enabled: true },
          fontSize: 14,
          automaticLayout: true,
          readOnly: true,
        }}
      />
    </div>
  );
}


[frontend/src/components/DiagramViewer.tsx]
// src/components/DiagramViewer.tsx
'use client';

import { useMemo } from 'react';
import {
  ReactFlow,          // ⬅️ default → named import
  Background,
  Controls,
  MiniMap,
  type Edge,
  type Node,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';

/** 간단 예시: 선택된 파일 경로를 루트 노드로 삼아 두 개의 자식으로 연결 */
function makeGraph(filePath: string): { nodes: Node[]; edges: Edge[] } {
  const idRoot = filePath.replace(/[^\w]/g, '_');

  const nodes: Node[] = [
    {
      id: idRoot,
      data: { label: idRoot },
      position: { x: 0, y: 0 },
      style: { padding: 6, borderRadius: 4, border: '1px solid #3b82f6' },
    },
    { id: 'A', data: { label: 'A' }, position: { x: -120, y: 120 } },
    { id: 'B', data: { label: 'B' }, position: { x: 120, y: 120 } },
  ];

  const edges: Edge[] = [
    { id: 'e1', source: idRoot, target: 'A', animated: true },
    { id: 'e2', source: idRoot, target: 'B', animated: true },
  ];

  return { nodes, edges };
}

export default function DiagramViewer({ filePath }: { filePath: string }) {
  const { nodes, edges } = useMemo(() => makeGraph(filePath), [filePath]);

  return (
    <div className="relative h-full w-full border-l border-slate-300">
      <ReactFlow
        nodes={nodes}
        edges={edges}
        fitView
        className="bg-gray-50"
        minZoom={0.2}
        maxZoom={2}
      >
        <Background variant="dots" gap={16} size={1} />
        <MiniMap pannable zoomable />
        <Controls />
      </ReactFlow>
    </div>
  );
}


[frontend/src/components/EditorTabs.tsx]
'use client';

import { useEffect, useState } from 'react';
import Editor from '@monaco-editor/react';
import { useEditor } from '@/store/editor';

/* ─── 개별 코드 탭 ─────────────────────────────────────────── */
function CodePane({ path }: { path: string }) {
  const [code, setCode] = useState('// loading…');
  const [err, setErr] = useState<string>();

  useEffect(() => {
    let active = true;
    (async () => {
      const res = await fetch(`/api/file?path=${encodeURIComponent(path)}`);
      if (!active) return;

      if (res.ok) {
        setCode(await res.text());
      } else {
        const { error } = await res.json().catch(() => ({ error: res.statusText }));
        setErr(`${res.status}: ${error}`);
      }
    })();
    return () => {
      active = false;
    };
  }, [path]);

  const lang = (() => {
    if (path.endsWith('.py')) return 'python';
    if (path.endsWith('.tsx') || path.endsWith('.ts')) return 'typescript';
    if (path.endsWith('.md')) return 'markdown';
    return 'plaintext';
  })();

  if (err) {
    return (
      <pre className="p-4 text-sm text-red-600 whitespace-pre-wrap">{err}</pre>
    );
  }

  return (
    <Editor
      height="calc(100% - 2rem)" // 상단 탭바 높이 제외
      defaultLanguage={lang}
      value={code}
      theme="vs-dark"
      options={{
        readOnly: true,
        fontSize: 14,
        minimap: { enabled: true },
        automaticLayout: true,
      }}
    />
  );
}

/* ─── 탭 컨테이너 ─────────────────────────────────────────── */
export default function EditorTabs() {
  const { tabs, activeId, setActive, close } = useEditor();

  if (!tabs.length) {
    return (
      <div className="h-full flex items-center justify-center text-sm text-slate-500">
        Open a file to begin
      </div>
    );
  }

  const active = tabs.find((t) => t.id === activeId) ?? tabs[0];

  return (
    <div className="flex flex-col h-full">
      {/* 탭 헤더 */}
      <div className="h-8 flex items-center bg-slate-200 border-b border-slate-300 select-none">
        {tabs.map((t) => {
          const on = t.id === active.id;
          return (
            <div
              key={t.id}
              onClick={() => setActive(t.id)}
              className={
                'h-full flex items-center px-3 text-xs cursor-pointer border-r border-slate-300 transition-colors ' +
                (on
                  ? 'bg-white text-sky-700 font-semibold border-b-2 border-b-sky-600'
                  : 'text-slate-600 hover:bg-slate-100 border-b-2 border-b-transparent')
              }
            >
              {t.name}
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  close(t.id);
                }}
                className="ml-2 text-slate-400 hover:text-slate-600 transition-colors"
              >
                ×
              </button>
            </div>
          );
        })}
      </div>

      {/* 코드 영역 */}
      <div className="flex-1">
        <CodePane path={active.path} />
      </div>
    </div>
  );
}


[frontend/src/components/FileExplorer.tsx]
'use client';

import { useEffect, useState } from 'react';
import clsx from 'clsx';
import { useFS, FileNode } from '@/store/files';
import { useEditor } from '@/store/editor';
import { nanoid } from 'nanoid';

/* 배열/객체/undefined → 배열 */
const arr = (x: FileNode[] | FileNode | undefined): FileNode[] =>
  Array.isArray(x) ? x : x ? [x] : [];

/* 한 줄 UI */
function Row({
  n, depth, isDir, isOpen, isActive, onClick,
}: {
  n: FileNode; depth: number; isDir: boolean; isOpen: boolean;
  isActive: boolean; onClick: () => void;
}) {
  return (
    <div
      style={{ paddingLeft: depth * 12 }}
      className={clsx(
        'cursor-pointer select-none text-xs py-[2px] px-1',
        'hover:bg-slate-100 transition-colors',
        isActive && 'bg-sky-100 text-sky-700'
      )}
      onClick={onClick}
    >
      {isDir ? (isOpen ? '▾ ' : '▸ ') : '  '}
      {n.name}
    </div>
  );
}

export default function FileExplorer() {
  const { tree, current, setCurrent, load } = useFS();
  const [open, setOpen] = useState<Record<string, boolean>>({ poc: true });

  /* 트리 로드 */
  useEffect(() => {
    (async () => {
      const data: FileNode[] = await fetch('/api/files').then(r => r.json());
      load(data);
    })();
  }, [load]);

  /* 클릭 동작 */
  const click = (n: FileNode) => {
    if (Array.isArray(n.children)) {
      setOpen(o => ({ ...o, [n.path ?? '']: !o[n.path ?? ''] }));
    } else if (n.path) {
      /* 경로는 “poc/…” 포함 → API가 자동으로 잘라 줌 */
      setCurrent(n.id);
      useEditor
        .getState()
        .open({ id: nanoid(), path: n.path, name: n.name });
    }
  };

  /* 재귀 렌더 */
  const render = (nodes: FileNode[] | FileNode | undefined, depth = 0): JSX.Element[] =>
    arr(nodes).map(n => {
      const isDir    = Array.isArray(n.children);
      const isOpen   = !!open[n.path ?? ''];
      const isActive = current?.id === n.id;

      return (
        <div key={n.id}>
          <Row
            n={n} depth={depth} isDir={isDir} isOpen={isOpen}
            isActive={isActive} onClick={() => click(n)}
          />
          {isDir && isOpen && render(n.children, depth + 1)}
        </div>
      );
    });

  return (
    <aside className="w-full pl-2 h-full overflow-y-auto border-r border-slate-300 bg-slate-50">
      {render(tree)}
    </aside>
  );
}


[frontend/src/components/IconBar.tsx]
'use client';

import {
  FolderIcon,
  Squares2X2Icon,
  ChatBubbleLeftRightIcon,
} from '@heroicons/react/24/outline';
import type { ComponentType, SVGProps } from 'react';

type IconType = ComponentType<SVGProps<SVGSVGElement>>;
interface Props {
  states: { exp: boolean; dia: boolean; chat: boolean };
  toggle: { exp: () => void; dia: () => void; chat: () => void };
}

export default function IconBar({ states, toggle }: Props) {
  const Btn = ({
    on,
    click,
    Icon,
  }: {
    on: boolean;
    click: () => void;
    Icon: IconType;
  }) => (
    <button
      onClick={click}
      className={
        'w-10 h-10 flex items-center justify-center transition-colors ' +
        (on ? 'bg-white' : 'hover:bg-slate-100')
      }
    >
      <Icon className={'w-6 ' + (on ? 'stroke-sky-600' : 'stroke-slate-600')} />
    </button>
  );

  return (
    <div className="flex flex-col border-r border-slate-300 bg-slate-200">
      <Btn on={states.exp} click={toggle.exp} Icon={FolderIcon} />
      <Btn on={states.dia} click={toggle.dia} Icon={Squares2X2Icon} />
      <Btn on={states.chat} click={toggle.chat} Icon={ChatBubbleLeftRightIcon} />
    </div>
  );
}


[frontend/src/app/page.tsx]
'use client';

import { useState } from 'react';
import dynamic from 'next/dynamic';
import { useFS } from '@/store/files';
import { Panel, PanelGroup, PanelResizeHandle } from 'react-resizable-panels';

import IconBar      from '@/components/IconBar';
import FileExplorer from '@/components/FileExplorer';

const EditorTabs    = dynamic(() => import('@/components/EditorTabs'),    { ssr: false });
const DiagramViewer = dynamic(() => import('@/components/DiagramViewer'), { ssr: false });
const ChatUI        = dynamic(() => import('@/components/ChatUI'),        { ssr: false });

/* ─── Resize handles ────────────────────────────────────────────── */
const HHandle = () => (
  <PanelResizeHandle className="w-[4px] bg-slate-300 hover:bg-sky-600 cursor-col-resize transition-colors" />
);
const VHandle = () => (
  <PanelResizeHandle className="h-[4px] bg-slate-300 hover:bg-sky-600 cursor-row-resize transition-colors" />
);

export default function Home() {
  const { current }         = useFS();
  const [showExp, setExp]   = useState(true);
  const [showDia, setDia]   = useState(true);
  const [showChat, setChat] = useState(true);

  return (
    <div className="flex h-full">
      {/* ─── Activity / Icon bar ─────────────────────────────────── */}
      <IconBar
        states={{ exp: showExp, dia: showDia, chat: showChat }}
        toggle={{
          exp:  () => setExp(!showExp),
          dia:  () => setDia(!showDia),
          chat: () => setChat(!showChat),
        }}
      />

      {/* ─── Main panel group (horizontal) ───────────────────────── */}
      <PanelGroup direction="horizontal" className="flex-1">

        {/* ─── File-explorer column ──────────────────────────────── */}
        {showExp && (
          <>
            <Panel defaultSize={15} minSize={12}>
              <FileExplorer />
            </Panel>
            <HHandle />
          </>
        )}

        {/* ─── Code-editor column ────────────────────────────────── */}
        <Panel defaultSize={55} minSize={30} className="border-x border-slate-300">
          <EditorTabs />
        </Panel>

        {(showDia || showChat) && <HHandle />}

        {/* ─── Diagram / Chat column (vertical split) ────────────── */}
        {(showDia || showChat) && (
          <Panel defaultSize={30} minSize={18} className="flex-1 min-w-0">
            <PanelGroup direction="vertical">

              {/* ── Diagram viewer ─────────────────────────────── */}
              {showDia && (
                <>
                  <Panel defaultSize={70} minSize={30}>
                    {current && <DiagramViewer filePath={current.path} />}
                  </Panel>
                  {showChat && <VHandle />}
                </>
              )}

              {/* ── Chat UI ─────────────────────────────────────── */}
              {showChat && (
                <Panel defaultSize={30} minSize={20}>
                  <ChatUI />
                </Panel>
              )}

            </PanelGroup>
          </Panel>
        )}
      </PanelGroup>
    </div>
  );
}


[frontend/src/app/globals.css]
/* src/app/globals.css */
@import 'tailwindcss';

/* ─── 라이트 팔레트 ─── */
:root{
  --background: #ffffff;
  --foreground: #171717;
  --panel:      #f3f3f3;
  --border:     #e5e5e5;
  --side:       #eeeeee;
  --accent:     #0078d4;
}

/* ─── 다크 팔레트 ─── */
@media (prefers-color-scheme:dark){
  :root{
    --background: #1e1e1e;
    --foreground: #ededed;
    --panel:      #252526;
    --border:     #3c3c3c;
    --side:       #333337;
    --accent:     #569cd6;
  }
}

/* 기본 레이아웃 */
html, body {
  height: 100%;
}
body {
  background: var(--background);
  color: var(--foreground);
  font-family: system-ui, Arial, Helvetica, sans-serif;
  font-size: 14px;
  margin: 0;
  padding: 0;
  overscroll-behavior: none;
}

/* Custom Scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
::-webkit-scrollbar-thumb {
  background-color: var(--border);
  border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
  background-color: var(--accent);
}

/* 선택 행 하이라이트 */
.vscode-tree-active{
  background: var(--side);
  color: var(--accent);
}

/* Transition classes for smoother toggles, hovers, etc. */
.transition-colors {
  transition: color 0.15s ease, background-color 0.15s ease;
}


[frontend/src/store/editor.ts]
'use client';

import { create } from 'zustand';
import { immer } from 'zustand/middleware/immer';

export interface TabMeta {
  id: string;    // nanoid()
  path: string;  // '/src/App.tsx'
  name: string;  // 'App.tsx'
}

interface State {
  tabs: TabMeta[];
  activeId?: string;
  open:  (file: TabMeta) => void;
  close: (id: string)    => void;
  setActive: (id: string) => void;
}

export const useEditor = create<State>()(
  immer((set) => ({
    tabs: [],
    activeId: undefined,

    open: (file) =>
      set((s) => {
        if (!s.tabs.find((t) => t.path === file.path)) s.tabs.push(file);
        s.activeId = s.tabs.find((t) => t.path === file.path)?.id ?? file.id;
      }),

    close: (id) =>
      set((s) => {
        s.tabs = s.tabs.filter((t) => t.id !== id);
        if (s.activeId === id) s.activeId = s.tabs.at(-1)?.id;
      }),

    setActive: (id) => set({ activeId: id }),
  }))
);


[frontend/src/store/files.ts]
import { create } from 'zustand'

export type FileNode = { id: string; name: string; path: string; children?: FileNode[] }

interface FSState {
  tree: FileNode[]
  current?: FileNode
  setCurrent: (id: string) => void
  load: (t: FileNode[]) => void
}

export const useFS = create<FSState>(set => ({
  tree: [],
  current: undefined,
  setCurrent: id => set(s => ({ current: find(s.tree, id) })),
  load: tree => set({ tree })
}))

function find(nodes: FileNode[], id: string): FileNode | undefined {
  for (const n of nodes) {
    if (n.id === id) return n
    if (n.children) {
      const r = find(n.children, id)
      if (r) return r
    }
  }
}


