[src/components/ChatUI.tsx]
import { useState, useEffect, FormEvent } from 'react';
import { XMarkIcon, PlusIcon } from '@heroicons/react/24/outline';
import { useFS, getAllFilePaths } from '@/store/files';

interface Message {
  role: 'user' | 'bot';
  t: string;
}

interface Session {
  id: string;
  log: Message[];
}

const apiUrl = process.env.NEXT_PUBLIC_API_BASE_URL || '';

export default function ChatUI() {
  const [sessions, setSessions] = useState<Session[]>([]);
  const [currentSessionId, setCurrentSessionId] = useState<string | null>(null);
  const [input, setInput] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [showDropdown, setShowDropdown] = useState(false);
  const [dropdownItems, setDropdownItems] = useState<string[]>([]);
  const { tree } = useFS();
  const allFiles = getAllFilePaths(tree); // Retrieve all file paths from POC folder

  useEffect(() => {
    async function init() {
      const newSessionId = await openNewSession();
      if (newSessionId) setCurrentSessionId(newSessionId);
    }
    init();

    return () => {
      sessions.forEach((session) => {
        fetch(`${apiUrl}/api/chatbot/session/close`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ session_id: session.id }),
        });
      });
    };
  }, []);

  const openNewSession = async () => {
    try {
      const res = await fetch(`${apiUrl}/api/chatbot/session/open`, { method: 'GET' });
      if (!res.ok) throw new Error(`Failed to open session: ${res.status}`);
      const data = await res.json();
      const newSessionId = data.session_id;
      setSessions((prev) => [...prev, { id: newSessionId, log: [] }]);
      setCurrentSessionId(newSessionId);
      return newSessionId;
    } catch (err) {
      console.error('Failed to open session:', err);
      setError('Failed to open session. Please try again.');
      return null;
    }
  };

  const closeSession = async (sessionId: string) => {
    try {
      await fetch(`${apiUrl}/api/chatbot/session/close`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ session_id: sessionId }),
      });
      setSessions((prevSessions) => {
        const newSessions = prevSessions.filter((s) => s.id !== sessionId);
        if (currentSessionId === sessionId) {
          setCurrentSessionId(newSessions.length > 0 ? newSessions[0].id : null);
        }
        return newSessions;
      });
    } catch (err) {
      console.error('Failed to close session:', err);
      setError('Failed to close session. Please try again.');
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setInput(value);

    const atIndex = value.lastIndexOf('@');
    if (atIndex >= 0) {
      const afterAt = value.slice(atIndex + 1);
      const spaceIndex = afterAt.indexOf(' ');
      const word = spaceIndex >= 0 ? afterAt.slice(0, spaceIndex) : afterAt;
      if (word) {
        const filtered = allFiles.filter((path) =>
          path.toLowerCase().includes(word.toLowerCase())
        );
        setDropdownItems(filtered);
        setShowDropdown(true);
      } else {
        setDropdownItems(allFiles); // Show all files when just "@" is typed
        setShowDropdown(true);
      }
    } else {
      setShowDropdown(false); // Hide dropdown if no "@" present
    }
  };

  const handleSelectItem = (selected: string) => {
    const atIndex = input.lastIndexOf('@');
    if (atIndex >= 0) {
      const beforeAt = input.slice(0, atIndex + 1);
      const afterAt = input.slice(atIndex + 1);
      const spaceIndex = afterAt.indexOf(' ');
      const endIndex = spaceIndex >= 0 ? atIndex + 1 + spaceIndex : input.length;
      const newInput = beforeAt + selected + input.slice(endIndex);
      setInput(newInput); // Update input with selected file
    }
    setShowDropdown(false); // Hide dropdown after selection
  };

  const send = async (e: FormEvent) => {
    e.preventDefault();
    if (!input.trim() || !currentSessionId) return;

    setSessions((prev) =>
      prev.map((s) =>
        s.id === currentSessionId ? { ...s, log: [...s.log, { role: 'user', t: input }] } : s
      )
    );

    try {
      const res = await fetch(`${apiUrl}/api/chatbot/session/chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          session_id: currentSessionId,
          query: input,
          code: '',
          diagram: '',
          context_files: input.match(/@(\S+)/g)?.map((m) => m.slice(1)) || [],
        }),
      });
      if (!res.ok) throw new Error(`Failed to send message: ${res.status}`);
      const data = await res.json();
      const text = data.answer;
      setSessions((prev) =>
        prev.map((s) =>
          s.id === currentSessionId ? { ...s, log: [...s.log, { role: 'bot', t: text }] } : s
        )
      );
    } catch (err) {
      console.error('Failed to send message:', err);
      setSessions((prev) =>
        prev.map((s) =>
          s.id === currentSessionId
            ? { ...s, log: [...s.log, { role: 'bot', t: 'Error: Failed to send message.' }] }
            : s
        )
      );
    }
    setInput('');
  };

  const currentLog = sessions.find((s) => s.id === currentSessionId)?.log || [];

  return (
    <div className="flex flex-col h-full">
      <div className="flex items-center space-x-2 bg-slate-200 border-b border-slate-300 p-2 overflow-x-auto">
        {sessions.map((session, index) => (
          <div
            key={session.id}
            onClick={() => setCurrentSessionId(session.id)}
            className={`flex items-center px-3 py-1 cursor-pointer rounded-t-md ${
              session.id === currentSessionId ? 'bg-white border-t border-x border-slate-300' : ''
            }`}
          >
            <span>Session {index + 1}</span>
            <button
              onClick={(e) => {
                e.stopPropagation();
                closeSession(session.id);
              }}
              className="ml-2"
            >
              <XMarkIcon className="w-4 h-4" />
            </button>
          </div>
        ))}
        <button onClick={openNewSession} className="px-2 py-1">
          <PlusIcon className="w-5 h-5" />
        </button>
      </div>

      <div className="flex-1 p-4 overflow-y-auto">
        {sessions.length === 0 ? (
          <p className="text-center text-gray-500">
            No active sessions. Click '+' to start a new session.
          </p>
        ) : (
          currentLog.map((msg, i) => (
            <div key={i} className={`mb-2 ${msg.role === 'user' ? 'text-right' : 'text-left'}`}>
              <span
                className={`inline-block p-2 rounded ${
                  msg.role === 'user' ? 'bg-blue-100' : 'bg-gray-100'
                }`}
              >
                {msg.t}
              </span>
            </div>
          ))
        )}
        {error && <p className="text-red-500">{error}</p>}
      </div>

      {currentSessionId && (
        <div className="relative p-4 border-t border-slate-300">
          <form onSubmit={send}>
            <input
              type="text"
              value={input}
              onChange={handleInputChange}
              className="w-full p-2 border rounded"
              placeholder="Type your message..."
            />
            <button type="submit" className="hidden">
              Send
            </button>
          </form>
          {showDropdown && (
            <div
              className="absolute z-10 bg-white border border-slate-300 rounded shadow-md max-h-60 overflow-y-auto"
              style={{ bottom: '100%', left: 0 }}
            >
              {dropdownItems.map((item, i) => (
                <div
                  key={i}
                  onClick={() => handleSelectItem(item)}
                  className="px-3 py-1 hover:bg-slate-100 cursor-pointer"
                >
                  {item}
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
}

[src/components/CodeViewer.tsx]
'use client';

import { useEffect, useState } from 'react';
import Editor from '@monaco-editor/react';

export default function CodeViewer({ filePath }: { filePath: string }) {
  const [code, setCode] = useState('// loading…');

  /* ① 실제 파일 내용 가져오기 -------------------------------------- */
  useEffect(() => {
    (async () => {
      const c = await fetch(`/api/file?path=${encodeURIComponent(filePath)}`).then((r) =>
        r.text()
      );
      setCode(c);
    })();
  }, [filePath]);

  /* ② 확장자로 언어 결정 ----------------------------------------- */
  const lang = (() => {
    if (filePath.endsWith('.tsx') || filePath.endsWith('.ts')) return 'typescript';
    if (filePath.endsWith('.py')) return 'python';
    if (filePath.endsWith('.md')) return 'markdown';
    return 'plaintext';
  })();

  /* ③ 에디터 + 제목 바 ------------------------------------------- */
  return (
    <div className="h-full bg-slate-100 rounded-md shadow-sm overflow-hidden">
      <div className="h-8 flex items-center px-3 bg-slate-200 border-b border-slate-300 text-xs">
        {filePath.split('/').pop()}
      </div>
      <Editor
        height="calc(100% - 2rem)"
        defaultLanguage={lang}
        value={code}
        theme="vs-dark"
        options={{
          minimap: { enabled: true },
          fontSize: 14,
          automaticLayout: true,
          readOnly: true,
        }}
      />
    </div>
  );
}


[src/components/DiagramViewer.tsx]
'use client';

import { useState, useEffect } from 'react';
import {
  ReactFlow,
  Background,
  MiniMap,
  Controls,
  MarkerType,
  type Node,
  type Edge,
  type NodeMouseHandler,
} from '@xyflow/react';
import '@xyflow/react/dist/style.css';
import dagre from 'dagre';
import { nanoid } from 'nanoid';
import { useEditor } from '@/store/editor';
import { useFS, type FileNode } from '@/store/files';

// Global cache for diagram data and snippets
let diagramCache: Record<string, { nodes: RawNode[]; edges: RawEdge[] }> | null = null;
const snippetCache = new Map<string, string>(); // <cleanPath_functionName, preview>

// Dagre layout utility
function layout(nodes: Node[] = [], edges: Edge[] = []): Node[] {
  const g = new dagre.graphlib.Graph().setGraph({
    rankdir: 'TB',
    nodesep: 50,
    ranksep: 70,
  });
  g.setDefaultEdgeLabel(() => ({}));

  nodes.forEach((n) => g.setNode(n.id, { width: 160, height: 40 }));
  edges.forEach((e) => g.setEdge(e.source, e.target));
  dagre.layout(g);

  return nodes.map((n) => {
    const { x, y } = g.node(n.id);
    return { ...n, position: { x, y } };
  });
}

// Common types
interface RawNode {
  id: string;
  label?: string;
  function_name?: string;
  file: string;
}
interface RawEdge {
  id: string;
  source: string;
  target: string;
  type?: string;
}

// API endpoint
const ENDPOINT = '/api/generate_control_flow_graph';
const apiUrl = process.env.NEXT_PUBLIC_API_BASE_URL || '';

export default function DiagramViewer() {
  // State
  const [baseNodes, setBaseNodes] = useState<Node[]>([]);
  const [edges, setEdges] = useState<Edge[]>([]);
  const [loading, setLoad] = useState(true);
  const [error, setErr] = useState<string>();
  const [hoverId, setHoverId] = useState<string | null>(null);
  const [snippet, setSnippet] = useState<string>('');

  // Zustand stores
  const editorState = useEditor.getState();
  const fsState = useFS.getState();

  // Current active file path
  const activePath =
    editorState.tabs.find((t) => t.id === editorState.activeId)?.path ??
    editorState.tabs.at(-1)?.path ??
    '';

  // Utility to extract function snippet from code
  function extractFunctionSnippet(code: string, functionName: string): string | null {
    const lines = code.split('\n');
    let startLine = -1;

    // Find the start of the function definition at indentation level 0
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.trim().startsWith(`def ${functionName}(`)) {
        if (line === line.trim()) { // No leading spaces
          startLine = i;
          break;
        }
      }
    }

    if (startLine === -1) {
      return null;
    }

    // Find the end of the function (next line with indentation 0)
    for (let i = startLine + 1; i < lines.length; i++) {
      if (lines[i].trim() === '') {
        continue;
      }
      if (!lines[i].startsWith(' ') && !lines[i].startsWith('\t')) {
        return lines.slice(startLine, i).join('\n');
      }
    }
    return lines.slice(startLine).join('\n');
  }

  // Node click handler: open file in editor and highlight in explorer
  const onNodeClick: NodeMouseHandler = (_, node) => {
    const raw = (node.data as any)?.file as string | undefined;
    if (!raw) return;

    const clean = raw.replace(/^poc[\\/]/, '');
    editorState.open({
      id: nanoid(),
      path: clean,
      name: clean.split(/[\\/]/).pop() ?? clean,
    });

    const target = findByPath(fsState.tree, clean);
    if (target) fsState.setCurrent(target.id);
  };

  // Hover handlers
  const onEnter: NodeMouseHandler = async (_, node) => {
    setHoverId(node.id);

    const raw = (node.data as any)?.file as string | undefined;
    const functionName = (node.data as any)?.label as string | undefined;

    if (!raw || !functionName) {
      setSnippet('');
      return;
    }

    const clean = raw.replace(/^poc[\\/]/, '');
    const cacheKey = `${clean}_${functionName}`;

    if (snippetCache.has(cacheKey)) {
      setSnippet(snippetCache.get(cacheKey)!);
      return;
    }

    try {
      const txt = await fetch(
        `/api/file?path=${encodeURIComponent(clean)}`
      ).then((r) => r.text());

      const snippet = extractFunctionSnippet(txt, functionName);
      if (snippet) {
        const preview = snippet.split('\n').slice(0, 15).join('\n');
        snippetCache.set(cacheKey, preview);
        setSnippet(preview);
      } else {
        setSnippet('(function not found)');
      }
    } catch {
      setSnippet('(preview unavailable)');
    }
  };

  const onLeave: NodeMouseHandler = () => {
    setHoverId(null);
    setSnippet('');
  };

  // Load diagram data and cache it
  useEffect(() => {
    (async () => {
      if (diagramCache) {
        hydrate(diagramCache);
        setLoad(false);
        return;
      }

      setLoad(true);
      setErr(undefined);

      try {
        const res = await fetch(`${apiUrl}${ENDPOINT}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ path: '../../poc', file_type: 'py' }),
        });
        if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);

        const raw = await res.json();
        const json: Record<string, { nodes: RawNode[]; edges: RawEdge[] }> =
          typeof raw?.data === 'string' ? JSON.parse(raw.data) : raw.data;

        diagramCache = json;
        hydrate(json);
      } catch (e: any) {
        setErr(String(e));
        setBaseNodes([]);
        setEdges([]);
      } finally {
        setLoad(false);
      }
    })();
  }, []);

  // Compute node styles
  const nodes = baseNodes.map((n) => {
    const clean = (n.data as any)?.file?.replace(/^poc[\\/]/, '');
    const isActive = clean === activePath;
    const isHover = hoverId === n.id;

    return {
      ...n,
      style: {
        ...n.style,
        background: isHover
          ? '#fef9c3' // yellow-100
          : isActive
          ? '#dbeafe' // sky-100
          : '#ffffff',
        border: isHover
          ? '2px solid #eab308' // yellow-600
          : isActive
          ? '2px solid #0284c7' // sky-600
          : '1px solid #3b82f6',
        transition: 'all 0.1s ease-in-out',
      },
    };
  });

  // Loading and error states
  if (loading)
    return <div className="p-4 text-sm text-slate-500">diagram loading…</div>;
  if (error)
    return (
      <div className="p-4 text-sm text-red-600 whitespace-pre-wrap">
        {error}
      </div>
    );

  // Render
  return (
    <div className="relative h-full w-full border-l border-slate-300">
      <ReactFlow
        nodes={nodes}
        edges={edges}
        onNodeClick={onNodeClick}
        onNodeMouseEnter={onEnter}
        onNodeMouseLeave={onLeave}
        fitView
        minZoom={0.2}
        maxZoom={2}
        className="bg-gray-50"
      >
        <Background variant="dots" gap={16} size={1} />
        <MiniMap pannable zoomable />
        <Controls />
      </ReactFlow>

      {/* Code snippet panel */}
      {hoverId && snippet && (
        <div
          className="absolute bottom-2 right-2 w-[340px] max-h-[220px]
                     bg-slate-800 text-slate-100 text-xs
                     rounded shadow-lg p-3 overflow-auto
                     whitespace-pre font-mono"
        >
          {snippet}
        </div>
      )}
    </div>
  );

  // Hydrate JSON data into state
  function hydrate(json: Record<string, { nodes: RawNode[]; edges: RawEdge[] }>) {
    let allNodes: Node[] = [];
    let allEdges: Edge[] = [];

    Object.entries(json).forEach(([file, data]) => {
      const { nodes: rawNodes, edges: rawEdges } = data;

      // Filter edges to remove those referencing non-existent nodes
      const nodeIds = new Set(rawNodes.map((n) => n.id));
      const validEdges = rawEdges.filter((e) => nodeIds.has(e.source) && nodeIds.has(e.target));

      const fileNodes: Node[] = rawNodes.map((r) => ({
        id: r.id,
        data: { label: r.label || r.function_name || r.id, file: r.file },
        position: { x: 0, y: 0 },
        style: {
          padding: 6,
          borderRadius: 4,
          border: '1px solid #3b82f6',
          background: '#fff',
        },
      }));

      const fileEdges: Edge[] = validEdges.map((r) => ({
        id: r.id,
        source: r.source,
        target: r.target,
        markerEnd: { type: MarkerType.ArrowClosed },
        animated: true,
      }));

      allNodes = allNodes.concat(fileNodes);
      allEdges = allEdges.concat(fileEdges);
    });

    setBaseNodes(layout(allNodes, allEdges));
    setEdges(allEdges);
  }
}

// Utility to find FileNode by path
function findByPath(
  nodes: FileNode[] = [],
  p: string
): FileNode | undefined {
  for (const n of nodes) {
    if (n.path?.replace(/^poc[\\/]/, '') === p) return n;
    if (n.children) {
      const r = findByPath(n.children, p);
      if (r) return r;
    }
  }
}

[src/components/EditorTabs.tsx]
'use client';

import { useEffect, useState } from 'react';
import Editor from '@monaco-editor/react';
import { useEditor } from '@/store/editor';

function CodePane({ path, highlights }: { path: string; highlights?: { line: number; query: string } }) {
  const [code, setCode] = useState('// loading…');
  const [err, setErr] = useState<string>();
  const [editor, setEditor] = useState<any>(null);

  useEffect(() => {
    let active = true;
    (async () => {
      const res = await fetch(`/api/file?path=${encodeURIComponent(path)}`);
      if (!active) return;

      if (res.ok) {
        setCode(await res.text());
      } else {
        const { error } = await res.json().catch(() => ({ error: res.statusText }));
        setErr(`${res.status}: ${error}`);
      }
    })();
    return () => {
      active = false;
    };
  }, [path]);

  useEffect(() => {
    if (editor && highlights) {
      const { line, query } = highlights;
      editor.revealLineInCenter(line);
      editor.deltaDecorations([], [
        {
          range: new monaco.Range(line, 1, line, 1),
          options: { isWholeLine: true, className: 'highlight-line' },
        },
      ]);
      const matches = editor.getModel().findMatches(query, true, false, true, null, true);
      const decorations = matches.map((match) => ({
        range: match.range,
        options: { inlineClassName: 'highlight-text' },
      }));
      editor.deltaDecorations([], decorations);
    }
  }, [editor, highlights]);

  const lang = (() => {
    if (path.endsWith('.py')) return 'python';
    if (path.endsWith('.tsx') || path.endsWith('.ts')) return 'typescript';
    if (path.endsWith('.md')) return 'markdown';
    return 'plaintext';
  })();

  if (err) {
    return (
      <pre className="p-4 text-sm text-red-600 whitespace-pre-wrap">{err}</pre>
    );
  }

  return (
    <Editor
      height="calc(100% - 2rem)"
      defaultLanguage={lang}
      value={code}
      theme="vs-dark"
      onMount={(editor) => setEditor(editor)}
      options={{
        readOnly: true,
        fontSize: 14,
        minimap: { enabled: true },
        automaticLayout: true,
      }}
    />
  );
}

export default function EditorTabs() {
  const { tabs, activeId, setActive, close, searchHighlights } = useEditor();

  if (!tabs.length) {
    return (
      <div className="h-full flex items-center justify-center text-sm text-slate-500">
        Open a file to begin
      </div>
    );
  }

  const active = tabs.find((t) => t.id === activeId) ?? tabs[0];

  return (
    <div className="flex flex-col h-full">
      <div className="h-8 flex items-center bg-slate-200 border-b border-slate-300 select-none">
        {tabs.map((t) => {
          const on = t.id === active.id;
          return (
            <div
              key={t.id}
              onClick={() => setActive(t.id)}
              className={
                'h-full flex items-center px-3 text-xs cursor-pointer border-r border-slate-300 transition-colors ' +
                (on
                  ? 'bg-white text-sky-700 font-semibold border-b-2 border-b-sky-600'
                  : 'text-slate-600 hover:bg-slate-100 border-b-2 border-b-transparent')
              }
            >
              {t.name}
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  close(t.id);
                }}
                className="ml-2 text-slate-400 hover:text-slate-600 transition-colors"
              >
                ×
              </button>
            </div>
          );
        })}
      </div>
      <div className="flex-1">
        <CodePane path={active.path} highlights={searchHighlights} />
      </div>
    </div>
  );
}

[src/components/FileExplorer.tsx]
'use client';

import { useEffect, useState } from 'react';
import clsx from 'clsx';
import { useFS, FileNode } from '@/store/files';
import { useEditor } from '@/store/editor';
import { nanoid } from 'nanoid';

function filterTree(nodes: FileNode[] = []): FileNode[] {
  return nodes
    .filter((n) => n.name !== '__pycache__')
    .map((n) =>
      Array.isArray(n.children)
        ? { ...n, children: filterTree(n.children) }
        : n
    );
}

const arr = (x: FileNode[] | FileNode | undefined): FileNode[] =>
  Array.isArray(x) ? x : x ? [x] : [];

function Row({
  n,
  depth,
  isDir,
  isOpen,
  isActive,
  onClick,
}: {
  n: FileNode;
  depth: number;
  isDir: boolean;
  isOpen: boolean;
  isActive: boolean;
  onClick: () => void;
}) {
  return (
    <div
      style={{ paddingLeft: depth * 12 }}
      className={clsx(
        'cursor-pointer select-none text-xs py-[2px] px-1',
        'hover:bg-slate-100 transition-colors',
        isActive && 'bg-sky-100 text-sky-700'
      )}
      onClick={onClick}
    >
      {isDir ? (isOpen ? '▾ ' : '▸ ') : '  '}
      {n.name}
    </div>
  );
}

export default function FileExplorer() {
  const { tree, current, setCurrent, load } = useFS();
  const [open, setOpen] = useState<Record<string, boolean>>({ poc: true });
  const { activePath } = useEditor();

  useEffect(() => {
    (async () => {
      const data: FileNode[] = await fetch('/api/files').then((r) => r.json());
      const filteredTree = filterTree(data);
      load(filteredTree);
      useFS.getState().loadContents(); // 파일 내용 로드
    })();
  }, [load]);

  const click = (n: FileNode) => {
    if (Array.isArray(n.children)) {
      setOpen((o) => ({ ...o, [n.path ?? '']: !o[n.path ?? ''] }));
    } else if (n.path) {
      const clean = n.path.replace(/^poc[\\/]/, '');
      setCurrent(n.id);
      useEditor.getState().open({
        id: nanoid(),
        path: clean,
        name: n.name,
      });
    }
  };

  const render = (nodes: FileNode[] | FileNode | undefined, depth = 0): JSX.Element[] =>
    arr(nodes).map((n) => {
      const isDir = Array.isArray(n.children);
      const isOpen = !!open[n.path ?? ''];
      const isActive = n.path?.replace(/^poc[\\/]/, '') === activePath;

      return (
        <div key={n.id}>
          <Row
            n={n}
            depth={depth}
            isDir={isDir}
            isOpen={isOpen}
            isActive={isActive}
            onClick={() => click(n)}
          />
          {isDir && isOpen && render(n.children, depth + 1)}
        </div>
      );
    });

  return (
    <aside className="w-full pl-2 h-full overflow-y-auto border-r border-slate-300 bg-slate-50">
      {render(tree)}
    </aside>
  );
}

[src/components/IconBar.tsx]
import {
  FolderIcon,
  MagnifyingGlassIcon,
  Squares2X2Icon,
  ChatBubbleLeftRightIcon,
} from '@heroicons/react/24/outline';
import type { ComponentType, SVGProps } from 'react';

type IconType = ComponentType<SVGProps<SVGSVGElement>>;
interface Props {
  states?: {
    explorer?: boolean;
    search?: boolean;
    diagram?: boolean;
    chat?: boolean;
  };
  toggle?: {
    explorer?: () => void;
    search?: () => void;
    diagram?: () => void;
    chat?: () => void;
  };
}

export default function IconBar({ states = {}, toggle = {} }: Props) {
  const Btn = ({
    on = false,
    click = () => {},
    Icon,
  }: {
    on?: boolean;
    click?: () => void;
    Icon: IconType;
  }) => (
    <button
      onClick={click}
      className={
        'w-10 h-10 flex items-center justify-center transition-colors ' +
        (on ? 'bg-white' : 'hover:bg-slate-100')
      }
    >
      <Icon className={'w-6 ' + (on ? 'stroke-sky-600' : 'stroke-slate-600')} />
    </button>
  );

  return (
    <div className="flex flex-col border-r border-slate-300 bg-slate-200">
      <Btn on={states.explorer} click={toggle.explorer} Icon={FolderIcon} />
      <Btn on={states.search} click={toggle.search} Icon={MagnifyingGlassIcon} />
      <Btn on={states.diagram} click={toggle.diagram} Icon={Squares2X2Icon} />
      <Btn on={states.chat} click={toggle.chat} Icon={ChatBubbleLeftRightIcon} />
    </div>
  );
}

[src/components/SearchPanel.tsx]
'use client';

import { useState, useEffect } from 'react';
import { useEditor } from '@/store/editor';
import { nanoid } from 'nanoid';
import { useFS, getAllFilePaths } from '@/store/files';

export default function SearchPanel() {
  const [query, setQuery] = useState('');
  const [searchResults, setSearchResults] = useState<string[]>([]);
  const { tree, fileContents } = useFS();

  const allFiles = getAllFilePaths(tree, false); // 폴더 제외, 파일만

  useEffect(() => {
    if (!query.trim()) {
      setSearchResults([]);
      return;
    }

    const results = allFiles.filter((file) => {
      const content = fileContents[file];
      return content && content.toLowerCase().includes(query.toLowerCase());
    });
    setSearchResults(results);
  }, [query, allFiles, fileContents]);

  const handleFileClick = (path: string) => {
    const cleanPath = path.replace(/^poc[\\/]/, '');
    const name = cleanPath.split('/').pop() || cleanPath;
    const editorState = useEditor.getState();
    editorState.open({
      id: nanoid(),
      path: cleanPath,
      name,
    });
    // 검색어가 있으면 하이라이트를 위해 저장
    if (query.trim()) {
      // 파일 내용에서 검색어의 첫 번째 위치를 찾아 라인 번호를 계산
      const content = fileContents[path] || '';
      const lines = content.split('\n');
      const line = lines.findIndex((line) => line.toLowerCase().includes(query.toLowerCase())) + 1;
      if (line > 0) {
        editorState.setSearchHighlights(line, query);
      }
    }
  };

  return (
    <div className="w-full h-full p-2 bg-slate-50 border-r border-slate-300">
      <input
        type="text"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Search files..."
        className="w-full p-2 mb-2 border rounded"
      />
      <div className="overflow-y-auto max-h-[calc(100%-2rem)]">
        {query.trim() === '' ? (
          <p className="text-xs text-gray-500">Enter a keyword</p>
        ) : searchResults.length > 0 ? (
          searchResults.map((file, i) => (
            <div
              key={i}
              onClick={() => handleFileClick(file)}
              className="text-xs py-1 px-2 hover:bg-slate-100 cursor-pointer"
            >
              {file}
            </div>
          ))
        ) : (
          <p className="text-xs text-gray-500">No search results found</p>
        )}
      </div>
    </div>
  );
}

[src/app/page.tsx]
'use client';

import { useState, useEffect } from 'react';
import dynamic from 'next/dynamic';
import { useFS } from '@/store/files';
import { Panel, PanelGroup, PanelResizeHandle } from 'react-resizable-panels';

import IconBar from '@/components/IconBar';
import FileExplorer from '@/components/FileExplorer';
import SearchPanel from '@/components/SearchPanel';

const EditorTabs = dynamic(() => import('@/components/EditorTabs'), { ssr: false });
const DiagramViewer = dynamic(() => import('@/components/DiagramViewer'), { ssr: false });
const ChatUI = dynamic(() => import('@/components/ChatUI'), { ssr: false });

const HHandle = () => (
  <PanelResizeHandle className="w-[4px] bg-slate-300 hover:bg-sky-600 cursor-col-resize transition-colors" />
);
const VHandle = () => (
  <PanelResizeHandle className="h-[4px] bg-slate-300 hover:bg-sky-600 cursor-row-resize transition-colors" />
);

export default function Home() {
  const { current } = useFS();
  const [showSidebar, setShowSidebar] = useState(true);
  const [sidebarContent, setSidebarContent] = useState<'explorer' | 'search'>('explorer');
  const [showDia, setDia] = useState(true);
  const [showChat, setChat] = useState(true);

  useEffect(() => {
    setSidebarContent('explorer');
    setShowSidebar(true);
  }, []);

  const toggleExplorer = () => {
    if (sidebarContent === 'explorer' && showSidebar) {
      setShowSidebar(false);
    } else {
      setSidebarContent('explorer');
      setShowSidebar(true);
    }
  };

  const toggleSearch = () => {
    if (sidebarContent === 'search' && showSidebar) {
      setShowSidebar(false);
    } else {
      setSidebarContent('search');
      setShowSidebar(true);
    }
  };

  const toggleDia = () => setDia(!showDia);
  const toggleChat = () => setChat(!showChat);

  return (
    <div className="flex h-full">
      <IconBar
        states={{
          explorer: sidebarContent === 'explorer' && showSidebar,
          search: !(sidebarContent === 'search' && showSidebar),
          diagram: showDia,
          chat: showChat,
        }}
        toggle={{
          explorer: toggleExplorer,
          search: toggleSearch,
          diagram: toggleDia,
          chat: toggleChat,
        }}
      />
      <PanelGroup direction="horizontal" className="flex-1">
        {showSidebar && (
          <>
            <Panel defaultSize={15} minSize={12}>
              {sidebarContent === 'explorer' ? <FileExplorer /> : <SearchPanel />}
            </Panel>
            <HHandle />
          </>
        )}
        <Panel defaultSize={55} minSize={30} className="border-x border-slate-300">
          <EditorTabs />
        </Panel>
        {(showDia || showChat) && <HHandle />}
        {(showDia || showChat) && (
          <Panel defaultSize={30} minSize={18} className="flex-1 min-w-0">
            <PanelGroup direction="vertical">
              {showDia && (
                <>
                  <Panel defaultSize={70} minSize={30}>
                    <DiagramViewer />
                  </Panel>
                  {showChat && <VHandle />}
                </>
              )}
              {showChat && (
                <Panel defaultSize={30} minSize={20}>
                  <ChatUI />
                </Panel>
              )}
            </PanelGroup>
          </Panel>
        )}
      </PanelGroup>
    </div>
  );
}

[src/app/globals.css]
/* src/app/globals.css */
@import 'tailwindcss';

/* ─── 라이트 팔레트 ─── */
:root{
  --background: #ffffff;
  --foreground: #171717;
  --panel:      #f3f3f3;
  --border:     #e5e5e5;
  --side:       #eeeeee;
  --accent:     #0078d4;
}

/* ─── 다크 팔레트 ─── */
@media (prefers-color-scheme:dark){
  :root{
    --background: #1e1e1e;
    --foreground: #ededed;
    --panel:      #252526;
    --border:     #3c3c3c;
    --side:       #333337;
    --accent:     #569cd6;
  }
}

/* 기본 레이아웃 */
html, body {
  height: 100%;
}
body {
  background: var(--background);
  color: var(--foreground);
  font-family: system-ui, Arial, Helvetica, sans-serif;
  font-size: 14px;
  margin: 0;
  padding: 0;
  overscroll-behavior: none;
}

/* Custom Scrollbar */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}
::-webkit-scrollbar-thumb {
  background-color: var(--border);
  border-radius: 4px;
}
::-webkit-scrollbar-thumb:hover {
  background-color: var(--accent);
}

/* 선택 행 하이라이트 */
.vscode-tree-active{
  background: var(--side);
  color: var(--accent);
}

/* Transition classes for smoother toggles, hovers, etc. */
.transition-colors {
  transition: color 0.15s ease, background-color 0.15s ease;
}

.highlight-line {
  background-color: rgba(255, 255, 0, 0.2);
}
.highlight-text {
  background-color: rgba(255, 255, 0, 0.5);
}

[src/store/editor.ts]
'use client';

import { create } from 'zustand';
import { immer } from 'zustand/middleware/immer';
import { useFS } from '@/store/files';

export interface TabMeta {
  id: string;
  path: string;
  name: string;
}

interface State {
  tabs: TabMeta[];
  activeId?: string;
  activePath?: string;
  searchHighlights?: { line: number; query: string };
  open: (file: TabMeta) => void;
  close: (id: string) => void;
  setActive: (id: string) => void;
  setSearchHighlights: (line: number, query: string) => void;
}

export const useEditor = create<State>()(
  immer((set) => ({
    tabs: [],
    activeId: undefined,
    activePath: undefined,
    searchHighlights: undefined,
    open: (file) =>
      set((s) => {
        if (!s.tabs.find((t) => t.path === file.path)) s.tabs.push(file);
        s.activeId = s.tabs.find((t) => t.path === file.path)?.id ?? file.id;
        s.activePath = file.path;
        s.searchHighlights = undefined;
      }),
    close: (id) =>
      set((s) => {
        s.tabs = s.tabs.filter((t) => t.id !== id);
        if (s.activeId === id) {
          const lastTab = s.tabs.at(-1);
          s.activeId = lastTab?.id;
          s.activePath = lastTab?.path;
        }
        s.searchHighlights = undefined;
      }),
    setActive: (id) =>
      set((s) => {
        s.activeId = id;
        s.activePath = s.tabs.find((t) => t.id === id)?.path;
        if (s.activePath) {
          const node = findByPath(useFS.getState().tree, s.activePath);
          if (node) useFS.getState().setCurrent(node.id);
        }
        s.searchHighlights = undefined;
      }),
    setSearchHighlights: (line, query) =>
      set((s) => {
        s.searchHighlights = { line, query };
      }),
  }))
);

function findByPath(nodes: FileNode[], path: string): FileNode | undefined {
  for (const n of nodes) {
    if (n.path?.replace(/^poc[\\/]/, '') === path) return n;
    if (n.children) {
      const r = findByPath(n.children, path);
      if (r) return r;
    }
  }
}

[src/store/files.ts]
import { create } from 'zustand';

export type FileNode = { id: string; name: string; path: string; children?: FileNode[] };

interface FSState {
  tree: FileNode[];
  current?: FileNode;
  fileContents: Record<string, string>;
  setCurrent: (id: string) => void;
  load: (t: FileNode[]) => void;
  loadContents: () => Promise<void>;
}

export const useFS = create<FSState>((set, get) => ({
  tree: [],
  current: undefined,
  fileContents: {},
  setCurrent: (id) => set((state) => ({ current: find(state.tree, id) })),
  load: (tree) => set({ tree }),
  loadContents: async () => {
    const paths = getAllFilePaths(get().tree, false); // 파일만 가져오기
    for (const path of paths) {
      try {
        const response = await fetch(`/api/file?path=${encodeURIComponent(path)}`);
        if (response.ok) {
          const content = await response.text();
          set((state) => ({
            fileContents: { ...state.fileContents, [path]: content },
          }));
        } else {
          console.error(`Failed to fetch content for ${path}: ${response.status}`);
        }
      } catch (err) {
        console.error(`Error loading content for ${path}:`, err);
      }
    }
  },
}));

function find(nodes: FileNode[], id: string): FileNode | undefined {
  for (const n of nodes) {
    if (n.id === id) return n;
    if (n.children) {
      const r = find(n.children, id);
      if (r) return r;
    }
  }
}

export function getAllFilePaths(tree: FileNode[], includeFolders = false): string[] {
  const paths: string[] = [];
  const traverse = (nodes: FileNode[]) => {
    for (const node of nodes) {
      if (!node.children || includeFolders) {
        const cleanPath = node.path.replace(/^poc[\\/]/, '');
        paths.push(cleanPath);
      }
      if (node.children) traverse(node.children);
    }
  };
  traverse(tree);
  return paths;
}

[backend/app/main.py]
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
from pathlib import Path
from schemas.common import *
from llm.diagram_generator import generate_control_flow_graph
from llm.chatbot import create_session, remove_session, generate_chatbot_answer_with_session, get_session_history
from fastapi.responses import JSONResponse

import json

# .env file loading
load_dotenv()

# FastAPI app initialization
app = FastAPI(title="Code-Diagram API")

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # 프론트엔드 도메인으로 제한 가능
    allow_credentials=True,
    allow_methods=["*"],  # 모든 HTTP 메서드 허용
    allow_headers=["*"],  # 모든 헤더 허용
)

# Define the path to the HTML template
HTML_PATH = Path(__file__).parent / "html" / "root.html"

# API Endpoint
@app.get("/", response_class=HTMLResponse)
async def root():
    try:
        # Read the HTML content from the file
        html_content = HTML_PATH.read_text(encoding="utf-8")
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(content="<h1>Template not found</h1>", status_code=404)

@app.post("/api/generate_control_flow_graph", response_model=DiagramResponse)
async def api_generate_control_flow_graph(request: DiagramRequest):
    """
    Generate a control flow graph (CFG) for the given code.
    """
    try:

        json_data = await generate_control_flow_graph(request.path, request.file_type)
        result = {
            "data": json_data
        }
        print(f'result in main.py: \\{result}')
        return DiagramResponse(**result)
    except Exception as e:
        return DiagramResponse(status=500, data=str(e))
    
@app.get("/api/sample_cfg")
async def sample_cfg():
    """artifacts/cfg_json_output.json 파일 그대로 반환"""
    json_path = Path(__file__).parent / "artifacts" / "stored_poc" / "cfg_json_output_all.json"
    data = json.loads(json_path.read_text(encoding="utf-8"))
    return JSONResponse(content=data)

@app.get("/api/chatbot/session/open")
async def api_open_session():
    try:
        session_id = create_session()
        return SessionResponse(session_id=session_id)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/chatbot/session/close")
async def api_close_session(req: SessionRequest):
    try:
        if not req.session_id:
            raise HTTPException(status_code=400, detail="Session ID is required")
        remove_session(req.session_id)
        return {"status": "closed"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/chatbot/session/chat", response_model=ChatbotQueryResponse)
async def api_session_chat(req: ChatbotQueryRequest):
    try:
        if not req.session_id:
            raise HTTPException(status_code=400, detail="Session ID is required")
        if not req.query:
            raise HTTPException(status_code=400, detail="Query is required")
        print(f"Session ID: {req.session_id}")
        print(f"Query: {req.query}")
        print(f"Code: {req.code}")
        print(f"Diagram: {req.diagram}")
        answer, highlight = await generate_chatbot_answer_with_session(
            req.session_id, req.query, req.code, req.diagram
        )
        return ChatbotQueryResponse(answer=answer, highlight=highlight)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
    
@app.get("/api/chatbot/session/get_history")
async def api_get_session_history(session_id: str):
    try:
        if not session_id:
            raise HTTPException(status_code=400, detail="Session ID is required")
        history = get_session_history(session_id)
        return {"session_id": session_id, "history": history}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

